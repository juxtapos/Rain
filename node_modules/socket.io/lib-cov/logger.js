/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['logger.js']) {
  _$jscoverage['logger.js'] = [];
  _$jscoverage['logger.js'][12] = 0;
  _$jscoverage['logger.js'][19] = 0;
  _$jscoverage['logger.js'][30] = 0;
  _$jscoverage['logger.js'][41] = 0;
  _$jscoverage['logger.js'][42] = 0;
  _$jscoverage['logger.js'][44] = 0;
  _$jscoverage['logger.js'][45] = 0;
  _$jscoverage['logger.js'][47] = 0;
  _$jscoverage['logger.js'][48] = 0;
  _$jscoverage['logger.js'][50] = 0;
  _$jscoverage['logger.js'][51] = 0;
  _$jscoverage['logger.js'][59] = 0;
  _$jscoverage['logger.js'][60] = 0;
  _$jscoverage['logger.js'][61] = 0;
  _$jscoverage['logger.js'][62] = 0;
  _$jscoverage['logger.js'][71] = 0;
  _$jscoverage['logger.js'][72] = 0;
  _$jscoverage['logger.js'][74] = 0;
  _$jscoverage['logger.js'][75] = 0;
  _$jscoverage['logger.js'][77] = 0;
  _$jscoverage['logger.js'][85] = 0;
  _$jscoverage['logger.js'][92] = 0;
  _$jscoverage['logger.js'][93] = 0;
  _$jscoverage['logger.js'][94] = 0;
}
_$jscoverage['logger.js'][12]++;
var util = require("./util"), toArray = util.toArray;
_$jscoverage['logger.js'][19]++;
var levels = ["error", "warn", "info", "debug"];
_$jscoverage['logger.js'][30]++;
var colors = [31, 33, 36, 90];
_$jscoverage['logger.js'][41]++;
function pad(str) {
  _$jscoverage['logger.js'][42]++;
  var max = 0;
  _$jscoverage['logger.js'][44]++;
  for (var i = 0, l = levels.length; i < l; i++) {
    _$jscoverage['logger.js'][45]++;
    max = Math.max(max, levels[i].length);
}
  _$jscoverage['logger.js'][47]++;
  if (str.length < max) {
    _$jscoverage['logger.js'][48]++;
    return str + new Array(max - str.length + 1).join(" ");
  }
  _$jscoverage['logger.js'][50]++;
  return str;
}
_$jscoverage['logger.js'][51]++;
;
_$jscoverage['logger.js'][59]++;
var Logger = module.exports = (function (opts) {
  _$jscoverage['logger.js'][60]++;
  opts = opts || {};
  _$jscoverage['logger.js'][61]++;
  this.colors = false !== opts.colors;
  _$jscoverage['logger.js'][62]++;
  this.level = 3;
});
_$jscoverage['logger.js'][71]++;
Logger.prototype.log = (function (type) {
  _$jscoverage['logger.js'][72]++;
  var index = levels.indexOf(type);
  _$jscoverage['logger.js'][74]++;
  if (index > this.level) {
    _$jscoverage['logger.js'][75]++;
    return this;
  }
  _$jscoverage['logger.js'][77]++;
  console.error.apply(console, [this.colors? "   \u001b[" + colors[index] + "m" + pad(type) + " -\u001b[39m": type + ":"].concat(toArray(arguments).slice(1)));
  _$jscoverage['logger.js'][85]++;
  return this;
});
_$jscoverage['logger.js'][92]++;
levels.forEach((function (name) {
  _$jscoverage['logger.js'][93]++;
  Logger.prototype[name] = (function () {
  _$jscoverage['logger.js'][94]++;
  this.log.apply(this, [name].concat(toArray(arguments)));
});
}));
_$jscoverage['logger.js'].source = ["","/*!"," * socket.io-node"," * Copyright(c) 2011 LearnBoost &lt;dev@learnboost.com&gt;"," * MIT Licensed"," */","","/**"," * Module dependencies."," */","","var util = require('./util')","  , toArray = util.toArray;","","/**"," * Log levels."," */","","var levels = [","    'error'","  , 'warn'","  , 'info'","  , 'debug'","];","","/**"," * Colors for log levels."," */","","var colors = [","    31","  , 33","  , 36","  , 90","];","","/**"," * Pads the nice output to the longest log level."," */","","function pad (str) {","  var max = 0;","","  for (var i = 0, l = levels.length; i &lt; l; i++)","    max = Math.max(max, levels[i].length);","","  if (str.length &lt; max)","    return str + new Array(max - str.length + 1).join(' ');","","  return str;","};","","/**"," * Logger (console)."," *"," * @api public"," */","","var Logger = module.exports = function (opts) {","  opts = opts || {}","  this.colors = false !== opts.colors;","  this.level = 3;","};","","/**"," * Log method."," *"," * @api public"," */","","Logger.prototype.log = function (type) {","  var index = levels.indexOf(type);","","  if (index &gt; this.level)","    return this;","","  console.error.apply(","      console","    , [this.colors","        ? '   \\033[' + colors[index] + 'm' + pad(type) + ' -\\033[39m'","        : type + ':'","      ].concat(toArray(arguments).slice(1))","  );","","  return this;","};","","/**"," * Generate methods."," */","","levels.forEach(function (name) {","  Logger.prototype[name] = function () {","    this.log.apply(this, [name].concat(toArray(arguments)));","  };","});"];
