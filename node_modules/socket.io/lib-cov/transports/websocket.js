/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['transports/websocket.js']) {
  _$jscoverage['transports/websocket.js'] = [];
  _$jscoverage['transports/websocket.js'][12] = 0;
  _$jscoverage['transports/websocket.js'][21] = 0;
  _$jscoverage['transports/websocket.js'][30] = 0;
  _$jscoverage['transports/websocket.js'][32] = 0;
  _$jscoverage['transports/websocket.js'][34] = 0;
  _$jscoverage['transports/websocket.js'][35] = 0;
  _$jscoverage['transports/websocket.js'][36] = 0;
  _$jscoverage['transports/websocket.js'][37] = 0;
  _$jscoverage['transports/websocket.js'][39] = 0;
  _$jscoverage['transports/websocket.js'][40] = 0;
  _$jscoverage['transports/websocket.js'][42] = 0;
  _$jscoverage['transports/websocket.js'][43] = 0;
  _$jscoverage['transports/websocket.js'][46] = 0;
  _$jscoverage['transports/websocket.js'][47] = 0;
  _$jscoverage['transports/websocket.js'][53] = 0;
  _$jscoverage['transports/websocket.js'][61] = 0;
  _$jscoverage['transports/websocket.js'][62] = 0;
  _$jscoverage['transports/websocket.js'][64] = 0;
  _$jscoverage['transports/websocket.js'][66] = 0;
  _$jscoverage['transports/websocket.js'][67] = 0;
  _$jscoverage['transports/websocket.js'][69] = 0;
  _$jscoverage['transports/websocket.js'][70] = 0;
  _$jscoverage['transports/websocket.js'][71] = 0;
  _$jscoverage['transports/websocket.js'][72] = 0;
  _$jscoverage['transports/websocket.js'][75] = 0;
  _$jscoverage['transports/websocket.js'][80] = 0;
  _$jscoverage['transports/websocket.js'][82] = 0;
  _$jscoverage['transports/websocket.js'][83] = 0;
  _$jscoverage['transports/websocket.js'][86] = 0;
  _$jscoverage['transports/websocket.js'][94] = 0;
  _$jscoverage['transports/websocket.js'][95] = 0;
  _$jscoverage['transports/websocket.js'][99] = 0;
  _$jscoverage['transports/websocket.js'][108] = 0;
  _$jscoverage['transports/websocket.js'][109] = 0;
  _$jscoverage['transports/websocket.js'][110] = 0;
  _$jscoverage['transports/websocket.js'][111] = 0;
  _$jscoverage['transports/websocket.js'][112] = 0;
  _$jscoverage['transports/websocket.js'][114] = 0;
  _$jscoverage['transports/websocket.js'][115] = 0;
  _$jscoverage['transports/websocket.js'][118] = 0;
  _$jscoverage['transports/websocket.js'][119] = 0;
  _$jscoverage['transports/websocket.js'][120] = 0;
  _$jscoverage['transports/websocket.js'][121] = 0;
  _$jscoverage['transports/websocket.js'][124] = 0;
  _$jscoverage['transports/websocket.js'][126] = 0;
  _$jscoverage['transports/websocket.js'][127] = 0;
  _$jscoverage['transports/websocket.js'][128] = 0;
  _$jscoverage['transports/websocket.js'][130] = 0;
  _$jscoverage['transports/websocket.js'][131] = 0;
  _$jscoverage['transports/websocket.js'][135] = 0;
  _$jscoverage['transports/websocket.js'][136] = 0;
  _$jscoverage['transports/websocket.js'][139] = 0;
  _$jscoverage['transports/websocket.js'][140] = 0;
  _$jscoverage['transports/websocket.js'][142] = 0;
  _$jscoverage['transports/websocket.js'][143] = 0;
  _$jscoverage['transports/websocket.js'][146] = 0;
  _$jscoverage['transports/websocket.js'][149] = 0;
  _$jscoverage['transports/websocket.js'][159] = 0;
  _$jscoverage['transports/websocket.js'][160] = 0;
  _$jscoverage['transports/websocket.js'][161] = 0;
  _$jscoverage['transports/websocket.js'][163] = 0;
  _$jscoverage['transports/websocket.js'][164] = 0;
  _$jscoverage['transports/websocket.js'][165] = 0;
  _$jscoverage['transports/websocket.js'][168] = 0;
  _$jscoverage['transports/websocket.js'][171] = 0;
  _$jscoverage['transports/websocket.js'][172] = 0;
  _$jscoverage['transports/websocket.js'][173] = 0;
  _$jscoverage['transports/websocket.js'][175] = 0;
  _$jscoverage['transports/websocket.js'][176] = 0;
  _$jscoverage['transports/websocket.js'][177] = 0;
  _$jscoverage['transports/websocket.js'][180] = 0;
  _$jscoverage['transports/websocket.js'][183] = 0;
  _$jscoverage['transports/websocket.js'][193] = 0;
  _$jscoverage['transports/websocket.js'][194] = 0;
  _$jscoverage['transports/websocket.js'][196] = 0;
  _$jscoverage['transports/websocket.js'][197] = 0;
  _$jscoverage['transports/websocket.js'][207] = 0;
  _$jscoverage['transports/websocket.js'][208] = 0;
  _$jscoverage['transports/websocket.js'][212] = 0;
  _$jscoverage['transports/websocket.js'][213] = 0;
  _$jscoverage['transports/websocket.js'][215] = 0;
  _$jscoverage['transports/websocket.js'][216] = 0;
  _$jscoverage['transports/websocket.js'][219] = 0;
  _$jscoverage['transports/websocket.js'][220] = 0;
  _$jscoverage['transports/websocket.js'][221] = 0;
  _$jscoverage['transports/websocket.js'][222] = 0;
  _$jscoverage['transports/websocket.js'][225] = 0;
  _$jscoverage['transports/websocket.js'][227] = 0;
  _$jscoverage['transports/websocket.js'][234] = 0;
  _$jscoverage['transports/websocket.js'][236] = 0;
  _$jscoverage['transports/websocket.js'][237] = 0;
  _$jscoverage['transports/websocket.js'][239] = 0;
  _$jscoverage['transports/websocket.js'][243] = 0;
  _$jscoverage['transports/websocket.js'][252] = 0;
  _$jscoverage['transports/websocket.js'][253] = 0;
  _$jscoverage['transports/websocket.js'][254] = 0;
  _$jscoverage['transports/websocket.js'][257] = 0;
  _$jscoverage['transports/websocket.js'][266] = 0;
  _$jscoverage['transports/websocket.js'][267] = 0;
  _$jscoverage['transports/websocket.js'][268] = 0;
  _$jscoverage['transports/websocket.js'][270] = 0;
  _$jscoverage['transports/websocket.js'][273] = 0;
  _$jscoverage['transports/websocket.js'][282] = 0;
  _$jscoverage['transports/websocket.js'][283] = 0;
  _$jscoverage['transports/websocket.js'][284] = 0;
  _$jscoverage['transports/websocket.js'][285] = 0;
  _$jscoverage['transports/websocket.js'][291] = 0;
  _$jscoverage['transports/websocket.js'][299] = 0;
  _$jscoverage['transports/websocket.js'][300] = 0;
  _$jscoverage['transports/websocket.js'][301] = 0;
  _$jscoverage['transports/websocket.js'][310] = 0;
  _$jscoverage['transports/websocket.js'][311] = 0;
  _$jscoverage['transports/websocket.js'][312] = 0;
  _$jscoverage['transports/websocket.js'][314] = 0;
  _$jscoverage['transports/websocket.js'][315] = 0;
  _$jscoverage['transports/websocket.js'][316] = 0;
  _$jscoverage['transports/websocket.js'][317] = 0;
  _$jscoverage['transports/websocket.js'][318] = 0;
  _$jscoverage['transports/websocket.js'][321] = 0;
  _$jscoverage['transports/websocket.js'][322] = 0;
  _$jscoverage['transports/websocket.js'][323] = 0;
  _$jscoverage['transports/websocket.js'][325] = 0;
  _$jscoverage['transports/websocket.js'][328] = 0;
  _$jscoverage['transports/websocket.js'][329] = 0;
  _$jscoverage['transports/websocket.js'][330] = 0;
  _$jscoverage['transports/websocket.js'][331] = 0;
  _$jscoverage['transports/websocket.js'][332] = 0;
  _$jscoverage['transports/websocket.js'][343] = 0;
  _$jscoverage['transports/websocket.js'][344] = 0;
  _$jscoverage['transports/websocket.js'][345] = 0;
  _$jscoverage['transports/websocket.js'][346] = 0;
  _$jscoverage['transports/websocket.js'][347] = 0;
}
_$jscoverage['transports/websocket.js'][12]++;
var Transport = require("../transport"), EventEmitter = process.EventEmitter, crypto = require("crypto"), parser = require("../parser");
_$jscoverage['transports/websocket.js'][21]++;
exports = module.exports = WebSocket;
_$jscoverage['transports/websocket.js'][30]++;
function WebSocket(mng, data) {
  _$jscoverage['transports/websocket.js'][32]++;
  var self = this;
  _$jscoverage['transports/websocket.js'][34]++;
  this.parser = new Parser();
  _$jscoverage['transports/websocket.js'][35]++;
  this.parser.on("data", (function (packet) {
  _$jscoverage['transports/websocket.js'][36]++;
  self.log.debug("websocket received data packet", packet);
  _$jscoverage['transports/websocket.js'][37]++;
  self.onMessage(parser.decodePacket(packet));
}));
  _$jscoverage['transports/websocket.js'][39]++;
  this.parser.on("close", (function () {
  _$jscoverage['transports/websocket.js'][40]++;
  self.end();
}));
  _$jscoverage['transports/websocket.js'][42]++;
  this.parser.on("error", (function () {
  _$jscoverage['transports/websocket.js'][43]++;
  self.end();
}));
  _$jscoverage['transports/websocket.js'][46]++;
  Transport.call(this, mng, data);
}
_$jscoverage['transports/websocket.js'][47]++;
;
_$jscoverage['transports/websocket.js'][53]++;
WebSocket.prototype.__proto__ = Transport.prototype;
_$jscoverage['transports/websocket.js'][61]++;
WebSocket.prototype.onSocketConnect = (function () {
  _$jscoverage['transports/websocket.js'][62]++;
  var self = this;
  _$jscoverage['transports/websocket.js'][64]++;
  this.socket.setNoDelay(true);
  _$jscoverage['transports/websocket.js'][66]++;
  this.buffer = true;
  _$jscoverage['transports/websocket.js'][67]++;
  this.buffered = [];
  _$jscoverage['transports/websocket.js'][69]++;
  if (this.req.headers.upgrade !== "WebSocket") {
    _$jscoverage['transports/websocket.js'][70]++;
    this.log.warn("WebSocket connection invalid");
    _$jscoverage['transports/websocket.js'][71]++;
    this.end();
    _$jscoverage['transports/websocket.js'][72]++;
    return;
  }
  _$jscoverage['transports/websocket.js'][75]++;
  var origin = this.req.headers.origin, location = (this.socket.encrypted? "wss": "ws") + "://" + this.req.headers.host + this.req.url, waitingForNonce = false;
  _$jscoverage['transports/websocket.js'][80]++;
  if (this.req.headers["sec-websocket-key1"]) {
    _$jscoverage['transports/websocket.js'][82]++;
    if (! (this.req.head && this.req.head.length >= 8)) {
      _$jscoverage['transports/websocket.js'][83]++;
      waitingForNonce = true;
    }
    _$jscoverage['transports/websocket.js'][86]++;
    var headers = ["HTTP/1.1 101 WebSocket Protocol Handshake", "Upgrade: WebSocket", "Connection: Upgrade", "Sec-WebSocket-Origin: " + origin, "Sec-WebSocket-Location: " + location];
    _$jscoverage['transports/websocket.js'][94]++;
    if (this.req.headers["sec-websocket-protocol"]) {
      _$jscoverage['transports/websocket.js'][95]++;
      headers.push("Sec-WebSocket-Protocol: " + this.req.headers["sec-websocket-protocol"]);
    }
  }
  else {
    _$jscoverage['transports/websocket.js'][99]++;
    var headers = ["HTTP/1.1 101 Web Socket Protocol Handshake", "Upgrade: WebSocket", "Connection: Upgrade", "WebSocket-Origin: " + origin, "WebSocket-Location: " + location];
  }
  _$jscoverage['transports/websocket.js'][108]++;
  try {
    _$jscoverage['transports/websocket.js'][109]++;
    this.socket.write(headers.concat("", "").join("\r\n"));
    _$jscoverage['transports/websocket.js'][110]++;
    this.socket.setTimeout(0);
    _$jscoverage['transports/websocket.js'][111]++;
    this.socket.setNoDelay(true);
    _$jscoverage['transports/websocket.js'][112]++;
    this.socket.setEncoding("utf8");
  }
  catch (e) {
    _$jscoverage['transports/websocket.js'][114]++;
    this.end();
    _$jscoverage['transports/websocket.js'][115]++;
    return;
  }
  _$jscoverage['transports/websocket.js'][118]++;
  if (waitingForNonce) {
    _$jscoverage['transports/websocket.js'][119]++;
    this.socket.setEncoding("binary");
  }
  else {
    _$jscoverage['transports/websocket.js'][120]++;
    if (this.proveReception(headers)) {
      _$jscoverage['transports/websocket.js'][121]++;
      self.flush();
    }
  }
  _$jscoverage['transports/websocket.js'][124]++;
  var headBuffer = "";
  _$jscoverage['transports/websocket.js'][126]++;
  this.socket.on("data", (function (data) {
  _$jscoverage['transports/websocket.js'][127]++;
  if (waitingForNonce) {
    _$jscoverage['transports/websocket.js'][128]++;
    headBuffer += data;
    _$jscoverage['transports/websocket.js'][130]++;
    if (headBuffer.length < 8) {
      _$jscoverage['transports/websocket.js'][131]++;
      return;
    }
    _$jscoverage['transports/websocket.js'][135]++;
    self.socket.setEncoding("utf8");
    _$jscoverage['transports/websocket.js'][136]++;
    waitingForNonce = false;
    _$jscoverage['transports/websocket.js'][139]++;
    self.req.head = headBuffer.substr(0, 8);
    _$jscoverage['transports/websocket.js'][140]++;
    headBuffer = "";
    _$jscoverage['transports/websocket.js'][142]++;
    if (self.proveReception(headers)) {
      _$jscoverage['transports/websocket.js'][143]++;
      self.flush();
    }
    _$jscoverage['transports/websocket.js'][146]++;
    return;
  }
  _$jscoverage['transports/websocket.js'][149]++;
  self.parser.add(data);
}));
});
_$jscoverage['transports/websocket.js'][159]++;
WebSocket.prototype.write = (function (data) {
  _$jscoverage['transports/websocket.js'][160]++;
  if (this.open) {
    _$jscoverage['transports/websocket.js'][161]++;
    this.drained = false;
    _$jscoverage['transports/websocket.js'][163]++;
    if (this.buffer) {
      _$jscoverage['transports/websocket.js'][164]++;
      this.buffered.push(data);
      _$jscoverage['transports/websocket.js'][165]++;
      return this;
    }
    _$jscoverage['transports/websocket.js'][168]++;
    var length = Buffer.byteLength(data), buffer = new Buffer(2 + length);
    _$jscoverage['transports/websocket.js'][171]++;
    buffer.write("\u0000", "binary");
    _$jscoverage['transports/websocket.js'][172]++;
    buffer.write(data, 1, "utf8");
    _$jscoverage['transports/websocket.js'][173]++;
    buffer.write("\uffff", 1 + length, "binary");
    _$jscoverage['transports/websocket.js'][175]++;
    try {
      _$jscoverage['transports/websocket.js'][176]++;
      if (this.socket.write(buffer)) {
        _$jscoverage['transports/websocket.js'][177]++;
        this.drained = true;
      }
    }
    catch (e) {
      _$jscoverage['transports/websocket.js'][180]++;
      this.end();
    }
    _$jscoverage['transports/websocket.js'][183]++;
    this.log.debug("websocket writing", data);
  }
});
_$jscoverage['transports/websocket.js'][193]++;
WebSocket.prototype.flush = (function () {
  _$jscoverage['transports/websocket.js'][194]++;
  this.buffer = false;
  _$jscoverage['transports/websocket.js'][196]++;
  for (var i = 0, l = this.buffered.length; i < l; i++) {
    _$jscoverage['transports/websocket.js'][197]++;
    this.write(this.buffered.splice(0, 1));
}
});
_$jscoverage['transports/websocket.js'][207]++;
WebSocket.prototype.proveReception = (function (headers) {
  _$jscoverage['transports/websocket.js'][208]++;
  var self = this, k1 = this.req.headers["sec-websocket-key1"], k2 = this.req.headers["sec-websocket-key2"];
  _$jscoverage['transports/websocket.js'][212]++;
  if (k1 && k2) {
    _$jscoverage['transports/websocket.js'][213]++;
    var md5 = crypto.createHash("md5");
    _$jscoverage['transports/websocket.js'][215]++;
    [k1, k2].forEach((function (k) {
  _$jscoverage['transports/websocket.js'][216]++;
  var n = parseInt(k.replace(/[^\d]/g, "")), spaces = k.replace(/[^ ]/g, "").length;
  _$jscoverage['transports/websocket.js'][219]++;
  if (spaces === 0 || n % spaces !== 0) {
    _$jscoverage['transports/websocket.js'][220]++;
    self.log.warn("Invalid WebSocket key: \"" + k + "\".");
    _$jscoverage['transports/websocket.js'][221]++;
    self.end();
    _$jscoverage['transports/websocket.js'][222]++;
    return false;
  }
  _$jscoverage['transports/websocket.js'][225]++;
  n /= spaces;
  _$jscoverage['transports/websocket.js'][227]++;
  md5.update(String.fromCharCode(n >> 24 & 255, n >> 16 & 255, n >> 8 & 255, n & 255));
}));
    _$jscoverage['transports/websocket.js'][234]++;
    md5.update(this.req.head.toString("binary"));
    _$jscoverage['transports/websocket.js'][236]++;
    try {
      _$jscoverage['transports/websocket.js'][237]++;
      this.socket.write(md5.digest("binary"), "binary");
    }
    catch (e) {
      _$jscoverage['transports/websocket.js'][239]++;
      this.end();
    }
  }
  _$jscoverage['transports/websocket.js'][243]++;
  return true;
});
_$jscoverage['transports/websocket.js'][252]++;
WebSocket.prototype.payload = (function (msgs) {
  _$jscoverage['transports/websocket.js'][253]++;
  for (var i = 0, l = msgs.length; i < l; i++) {
    _$jscoverage['transports/websocket.js'][254]++;
    this.write(msgs[i]);
}
  _$jscoverage['transports/websocket.js'][257]++;
  return this;
});
_$jscoverage['transports/websocket.js'][266]++;
WebSocket.prototype.doClose = (function () {
  _$jscoverage['transports/websocket.js'][267]++;
  try {
    _$jscoverage['transports/websocket.js'][268]++;
    this.socket.write("\u00ff\u0000", "binary");
  }
  catch (e) {
    _$jscoverage['transports/websocket.js'][270]++;
    this.onClose();
  }
  _$jscoverage['transports/websocket.js'][273]++;
  this.socket.end();
});
_$jscoverage['transports/websocket.js'][282]++;
function Parser() {
  _$jscoverage['transports/websocket.js'][283]++;
  this.buffer = "";
  _$jscoverage['transports/websocket.js'][284]++;
  this.i = 0;
}
_$jscoverage['transports/websocket.js'][285]++;
;
_$jscoverage['transports/websocket.js'][291]++;
Parser.prototype.__proto__ = EventEmitter.prototype;
_$jscoverage['transports/websocket.js'][299]++;
Parser.prototype.add = (function (data) {
  _$jscoverage['transports/websocket.js'][300]++;
  this.buffer += data;
  _$jscoverage['transports/websocket.js'][301]++;
  this.parse();
});
_$jscoverage['transports/websocket.js'][310]++;
Parser.prototype.parse = (function () {
  _$jscoverage['transports/websocket.js'][311]++;
  for (var i = this.i, chr, l = this.buffer.length; i < l; i++) {
    _$jscoverage['transports/websocket.js'][312]++;
    chr = this.buffer[i];
    _$jscoverage['transports/websocket.js'][314]++;
    if (this.buffer.length == 2 && this.buffer[1] == "\u0000") {
      _$jscoverage['transports/websocket.js'][315]++;
      this.emit("close");
      _$jscoverage['transports/websocket.js'][316]++;
      this.buffer = "";
      _$jscoverage['transports/websocket.js'][317]++;
      this.i = 0;
      _$jscoverage['transports/websocket.js'][318]++;
      return;
    }
    _$jscoverage['transports/websocket.js'][321]++;
    if (i === 0) {
      _$jscoverage['transports/websocket.js'][322]++;
      if (chr != "\u0000") {
        _$jscoverage['transports/websocket.js'][323]++;
        this.error("Bad framing. Expected null byte as first frame");
      }
      else {
        _$jscoverage['transports/websocket.js'][325]++;
        continue;
      }
    }
    _$jscoverage['transports/websocket.js'][328]++;
    if (chr == "\ufffd") {
      _$jscoverage['transports/websocket.js'][329]++;
      this.emit("data", this.buffer.substr(1, i - 1));
      _$jscoverage['transports/websocket.js'][330]++;
      this.buffer = this.buffer.substr(i + 1);
      _$jscoverage['transports/websocket.js'][331]++;
      this.i = 0;
      _$jscoverage['transports/websocket.js'][332]++;
      return this.parse();
    }
}
});
_$jscoverage['transports/websocket.js'][343]++;
Parser.prototype.error = (function (reason) {
  _$jscoverage['transports/websocket.js'][344]++;
  this.buffer = "";
  _$jscoverage['transports/websocket.js'][345]++;
  this.i = 0;
  _$jscoverage['transports/websocket.js'][346]++;
  this.emit("error", reason);
  _$jscoverage['transports/websocket.js'][347]++;
  return this;
});
_$jscoverage['transports/websocket.js'].source = ["","/*!"," * socket.io-node"," * Copyright(c) 2011 LearnBoost &lt;dev@learnboost.com&gt;"," * MIT Licensed"," */","","/**"," * Module requirements."," */","","var Transport = require('../transport')","  , EventEmitter = process.EventEmitter","  , crypto = require('crypto')","  , parser = require('../parser');","","/**"," * Export the constructor."," */","","exports = module.exports = WebSocket;","","/**"," * HTTP interface constructor. Interface compatible with all transports that"," * depend on request-response cycles."," *"," * @api public"," */","","function WebSocket (mng, data) {","  // parser","  var self = this;","","  this.parser = new Parser();","  this.parser.on('data', function (packet) {","    self.log.debug('websocket received data packet', packet);","    self.onMessage(parser.decodePacket(packet));","  });","  this.parser.on('close', function () {","    self.end();","  });","  this.parser.on('error', function () {","    self.end();","  });","","  Transport.call(this, mng, data);","};","","/**"," * Inherits from Transport."," */","","WebSocket.prototype.__proto__ = Transport.prototype;","","/**"," * Called when the socket connects."," *"," * @api private"," */","","WebSocket.prototype.onSocketConnect = function () {","  var self = this;","","  this.socket.setNoDelay(true);","","  this.buffer = true;","  this.buffered = [];","","  if (this.req.headers.upgrade !== 'WebSocket') {","    this.log.warn('WebSocket connection invalid');","    this.end();","    return;","  }","","  var origin = this.req.headers.origin","    , location = (this.socket.encrypted ? 'wss' : 'ws')","               + '://' + this.req.headers.host + this.req.url","    , waitingForNonce = false;","","  if (this.req.headers['sec-websocket-key1']) {","    // If we don't have the nonce yet, wait for it (HAProxy compatibility).","    if (! (this.req.head &amp;&amp; this.req.head.length &gt;= 8)) {","      waitingForNonce = true;","    }","","    var headers = [","        'HTTP/1.1 101 WebSocket Protocol Handshake'","      , 'Upgrade: WebSocket'","      , 'Connection: Upgrade'","      , 'Sec-WebSocket-Origin: ' + origin","      , 'Sec-WebSocket-Location: ' + location","    ];","","    if (this.req.headers['sec-websocket-protocol']){","      headers.push('Sec-WebSocket-Protocol: '","          + this.req.headers['sec-websocket-protocol']);","    }","  } else {","    var headers = [","        'HTTP/1.1 101 Web Socket Protocol Handshake'","      , 'Upgrade: WebSocket'","      , 'Connection: Upgrade'","      , 'WebSocket-Origin: ' + origin","      , 'WebSocket-Location: ' + location","    ];","  }","","  try {","    this.socket.write(headers.concat('', '').join('\\r\\n'));","    this.socket.setTimeout(0);","    this.socket.setNoDelay(true);","    this.socket.setEncoding('utf8');","  } catch (e) {","    this.end();","    return;","  }","","  if (waitingForNonce) {","    this.socket.setEncoding('binary');","  } else if (this.proveReception(headers)) {","    self.flush();","  }","","  var headBuffer = '';","","  this.socket.on('data', function (data) {","    if (waitingForNonce) {","      headBuffer += data;","","      if (headBuffer.length &lt; 8) {","        return;","      }","","      // Restore the connection to utf8 encoding after receiving the nonce","      self.socket.setEncoding('utf8');","      waitingForNonce = false;","","      // Stuff the nonce into the location where it's expected to be","      self.req.head = headBuffer.substr(0, 8);","      headBuffer = '';","","      if (self.proveReception(headers)) {","        self.flush();","      }","","      return;","    }","","    self.parser.add(data);","  });","};","","/**"," * Writes to the socket."," *"," * @api private"," */","","WebSocket.prototype.write = function (data) {","  if (this.open) {","    this.drained = false;","","    if (this.buffer) {","      this.buffered.push(data);","      return this;","    }","","    var length = Buffer.byteLength(data)","      , buffer = new Buffer(2 + length);","","    buffer.write('\\u0000', 'binary');","    buffer.write(data, 1, 'utf8');","    buffer.write('\\uffff', 1 + length, 'binary');","","    try {","      if (this.socket.write(buffer)) {","        this.drained = true;","      }","    } catch (e) {","      this.end();","    }","","    this.log.debug('websocket writing', data);","  }","};","","/**"," * Flushes the internal buffer"," *"," * @api private"," */","","WebSocket.prototype.flush = function () {","  this.buffer = false;","","  for (var i = 0, l = this.buffered.length; i &lt; l; i++) {","    this.write(this.buffered.splice(0, 1));","  }","};","","/**"," * Finishes the handshake."," *"," * @api private"," */","","WebSocket.prototype.proveReception = function (headers) {","  var self = this","    , k1 = this.req.headers['sec-websocket-key1']","    , k2 = this.req.headers['sec-websocket-key2'];","","  if (k1 &amp;&amp; k2){","    var md5 = crypto.createHash('md5');","","    [k1, k2].forEach(function (k) {","      var n = parseInt(k.replace(/[^\\d]/g, ''))","        , spaces = k.replace(/[^ ]/g, '').length;","","      if (spaces === 0 || n % spaces !== 0){","        self.log.warn('Invalid WebSocket key: \"' + k + '\".');","        self.end();","        return false;","      }","","      n /= spaces;","","      md5.update(String.fromCharCode(","        n &gt;&gt; 24 &amp; 0xFF,","        n &gt;&gt; 16 &amp; 0xFF,","        n &gt;&gt; 8  &amp; 0xFF,","        n       &amp; 0xFF));","    });","","    md5.update(this.req.head.toString('binary'));","","    try {","      this.socket.write(md5.digest('binary'), 'binary');","    } catch (e) {","      this.end();","    }","  }","","  return true;","};","","/**"," * Writes a payload."," *"," * @api private"," */","","WebSocket.prototype.payload = function (msgs) {","  for (var i = 0, l = msgs.length; i &lt; l; i++) {","    this.write(msgs[i]);","  }","","  return this;","};","","/**"," * Closes the connection."," *"," * @api private"," */","","WebSocket.prototype.doClose = function () {","  try {","    this.socket.write('\\xff\\x00', 'binary');","  } catch (e) {","    this.onClose();","  }","","  this.socket.end();","};","","/**"," * WebSocket parser"," *"," * @api public"," */","","function Parser () {","  this.buffer = '';","  this.i = 0;","};","","/**"," * Inherits from EventEmitter."," */","","Parser.prototype.__proto__ = EventEmitter.prototype;","","/**"," * Adds data to the buffer."," *"," * @api public"," */","","Parser.prototype.add = function (data) {","  this.buffer += data;","  this.parse();","};","","/**"," * Parses the buffer."," *"," * @api private"," */","","Parser.prototype.parse = function () {","  for (var i = this.i, chr, l = this.buffer.length; i &lt; l; i++){","    chr = this.buffer[i];","","    if (this.buffer.length == 2 &amp;&amp; this.buffer[1] == '\\u0000') {","      this.emit('close');","      this.buffer = '';","      this.i = 0;","      return;","    }","","    if (i === 0){","      if (chr != '\\u0000')","        this.error('Bad framing. Expected null byte as first frame');","      else","        continue;","    }","","    if (chr == '\\ufffd'){","      this.emit('data', this.buffer.substr(1, i - 1));","      this.buffer = this.buffer.substr(i + 1);","      this.i = 0;","      return this.parse();","    }","  }","};","","/**"," * Handles an error"," *"," * @api private"," */","","Parser.prototype.error = function (reason) {","  this.buffer = '';","  this.i = 0;","  this.emit('error', reason);","  return this;","};"];
