/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['transports/http.js']) {
  _$jscoverage['transports/http.js'] = [];
  _$jscoverage['transports/http.js'][12] = 0;
  _$jscoverage['transports/http.js'][19] = 0;
  _$jscoverage['transports/http.js'][27] = 0;
  _$jscoverage['transports/http.js'][28] = 0;
  _$jscoverage['transports/http.js'][29] = 0;
  _$jscoverage['transports/http.js'][35] = 0;
  _$jscoverage['transports/http.js'][43] = 0;
  _$jscoverage['transports/http.js'][44] = 0;
  _$jscoverage['transports/http.js'][45] = 0;
  _$jscoverage['transports/http.js'][49] = 0;
  _$jscoverage['transports/http.js'][50] = 0;
  _$jscoverage['transports/http.js'][53] = 0;
  _$jscoverage['transports/http.js'][54] = 0;
  _$jscoverage['transports/http.js'][57] = 0;
  _$jscoverage['transports/http.js'][58] = 0;
  _$jscoverage['transports/http.js'][60] = 0;
  _$jscoverage['transports/http.js'][62] = 0;
  _$jscoverage['transports/http.js'][72] = 0;
  _$jscoverage['transports/http.js'][73] = 0;
  _$jscoverage['transports/http.js'][75] = 0;
  _$jscoverage['transports/http.js'][76] = 0;
  _$jscoverage['transports/http.js'][77] = 0;
  _$jscoverage['transports/http.js'][87] = 0;
  _$jscoverage['transports/http.js'][88] = 0;
  _$jscoverage['transports/http.js'][97] = 0;
  _$jscoverage['transports/http.js'][98] = 0;
}
_$jscoverage['transports/http.js'][12]++;
var Transport = require("../transport"), parser = require("../parser");
_$jscoverage['transports/http.js'][19]++;
exports = module.exports = HTTPTransport;
_$jscoverage['transports/http.js'][27]++;
function HTTPTransport(mng, data) {
  _$jscoverage['transports/http.js'][28]++;
  Transport.call(this, mng, data);
}
_$jscoverage['transports/http.js'][29]++;
;
_$jscoverage['transports/http.js'][35]++;
HTTPTransport.prototype.__proto__ = Transport.prototype;
_$jscoverage['transports/http.js'][43]++;
HTTPTransport.prototype.handleRequest = (function (req) {
  _$jscoverage['transports/http.js'][44]++;
  if (req.method == "POST") {
    _$jscoverage['transports/http.js'][45]++;
    var buffer = "", res = req.res, self = this;
    _$jscoverage['transports/http.js'][49]++;
    req.on("data", (function (data) {
  _$jscoverage['transports/http.js'][50]++;
  buffer += data;
}));
    _$jscoverage['transports/http.js'][53]++;
    req.on("end", (function () {
  _$jscoverage['transports/http.js'][54]++;
  self.onData(buffer);
}));
    _$jscoverage['transports/http.js'][57]++;
    res.writeHead(200);
    _$jscoverage['transports/http.js'][58]++;
    res.end("");
  }
  else {
    _$jscoverage['transports/http.js'][60]++;
    this.response = req.res;
    _$jscoverage['transports/http.js'][62]++;
    Transport.prototype.handleRequest.call(this, req);
  }
});
_$jscoverage['transports/http.js'][72]++;
HTTPTransport.prototype.onData = (function (data) {
  _$jscoverage['transports/http.js'][73]++;
  var messages = parser.decodePayload(data);
  _$jscoverage['transports/http.js'][75]++;
  for (var i = 0, l = messages.length; i < l; i++) {
    _$jscoverage['transports/http.js'][76]++;
    this.log.debug("xhr received data packet", data);
    _$jscoverage['transports/http.js'][77]++;
    this.onMessage(messages[i]);
}
});
_$jscoverage['transports/http.js'][87]++;
HTTPTransport.prototype.doClose = (function () {
  _$jscoverage['transports/http.js'][88]++;
  this.response.end();
});
_$jscoverage['transports/http.js'][97]++;
HTTPTransport.prototype.payload = (function (msgs) {
  _$jscoverage['transports/http.js'][98]++;
  this.write(parser.encodePayload(msgs));
});
_$jscoverage['transports/http.js'].source = ["","/*!"," * socket.io-node"," * Copyright(c) 2011 LearnBoost &lt;dev@learnboost.com&gt;"," * MIT Licensed"," */","","/**"," * Module requirements."," */","","var Transport = require('../transport')","  , parser = require('../parser');","","/**"," * Export the constructor."," */","","exports = module.exports = HTTPTransport;","","/**"," * HTTP interface constructor. For all non-websocket transports."," *"," * @api public"," */","","function HTTPTransport (mng, data) {","  Transport.call(this, mng, data);","};","","/**"," * Inherits from Transport."," */","","HTTPTransport.prototype.__proto__ = Transport.prototype;","","/**"," * Handles a request."," *"," * @api private"," */","","HTTPTransport.prototype.handleRequest = function (req) {","  if (req.method == 'POST') {","    var buffer = ''","      , res = req.res","      , self = this;","","    req.on('data', function (data) {","      buffer += data;","    });","","    req.on('end', function () {","      self.onData(buffer);","    });","","    res.writeHead(200);","    res.end('');","  } else {","    this.response = req.res;","","    Transport.prototype.handleRequest.call(this, req);","  }","};","","/**"," * Handles data payload."," *"," * @api private"," */","","HTTPTransport.prototype.onData = function (data) {","  var messages = parser.decodePayload(data);","","  for (var i = 0, l = messages.length; i &lt; l; i++) {","    this.log.debug('xhr received data packet', data);","    this.onMessage(messages[i]);","  }","};","","/**"," * Closes the request-response cycle"," *"," * @api private"," */","","HTTPTransport.prototype.doClose = function () {","  this.response.end();","};","","/**"," * Writes a payload of messages"," *"," * @api private"," */","","HTTPTransport.prototype.payload = function (msgs) {","  this.write(parser.encodePayload(msgs));","};"];
