/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['parser.js']) {
  _$jscoverage['parser.js'] = [];
  _$jscoverage['parser.js'][16] = 0;
  _$jscoverage['parser.js'][31] = 0;
  _$jscoverage['parser.js'][41] = 0;
  _$jscoverage['parser.js'][51] = 0;
  _$jscoverage['parser.js'][52] = 0;
  _$jscoverage['parser.js'][58] = 0;
  _$jscoverage['parser.js'][60] = 0;
  _$jscoverage['parser.js'][63] = 0;
  _$jscoverage['parser.js'][64] = 0;
  _$jscoverage['parser.js'][66] = 0;
  _$jscoverage['parser.js'][69] = 0;
  _$jscoverage['parser.js'][70] = 0;
  _$jscoverage['parser.js'][71] = 0;
  _$jscoverage['parser.js'][74] = 0;
  _$jscoverage['parser.js'][76] = 0;
  _$jscoverage['parser.js'][77] = 0;
  _$jscoverage['parser.js'][80] = 0;
  _$jscoverage['parser.js'][81] = 0;
  _$jscoverage['parser.js'][84] = 0;
  _$jscoverage['parser.js'][85] = 0;
  _$jscoverage['parser.js'][88] = 0;
  _$jscoverage['parser.js'][89] = 0;
  _$jscoverage['parser.js'][90] = 0;
  _$jscoverage['parser.js'][93] = 0;
  _$jscoverage['parser.js'][96] = 0;
  _$jscoverage['parser.js'][100] = 0;
  _$jscoverage['parser.js'][104] = 0;
  _$jscoverage['parser.js'][111] = 0;
  _$jscoverage['parser.js'][112] = 0;
  _$jscoverage['parser.js'][114] = 0;
  _$jscoverage['parser.js'][124] = 0;
  _$jscoverage['parser.js'][125] = 0;
  _$jscoverage['parser.js'][127] = 0;
  _$jscoverage['parser.js'][128] = 0;
  _$jscoverage['parser.js'][130] = 0;
  _$jscoverage['parser.js'][131] = 0;
  _$jscoverage['parser.js'][132] = 0;
  _$jscoverage['parser.js'][135] = 0;
  _$jscoverage['parser.js'][144] = 0;
  _$jscoverage['parser.js'][146] = 0;
  _$jscoverage['parser.js'][147] = 0;
  _$jscoverage['parser.js'][149] = 0;
  _$jscoverage['parser.js'][151] = 0;
  _$jscoverage['parser.js'][159] = 0;
  _$jscoverage['parser.js'][160] = 0;
  _$jscoverage['parser.js'][161] = 0;
  _$jscoverage['parser.js'][162] = 0;
  _$jscoverage['parser.js'][164] = 0;
  _$jscoverage['parser.js'][168] = 0;
  _$jscoverage['parser.js'][170] = 0;
  _$jscoverage['parser.js'][171] = 0;
  _$jscoverage['parser.js'][172] = 0;
  _$jscoverage['parser.js'][173] = 0;
  _$jscoverage['parser.js'][176] = 0;
  _$jscoverage['parser.js'][177] = 0;
  _$jscoverage['parser.js'][180] = 0;
  _$jscoverage['parser.js'][181] = 0;
  _$jscoverage['parser.js'][182] = 0;
  _$jscoverage['parser.js'][183] = 0;
  _$jscoverage['parser.js'][186] = 0;
  _$jscoverage['parser.js'][187] = 0;
  _$jscoverage['parser.js'][190] = 0;
  _$jscoverage['parser.js'][191] = 0;
  _$jscoverage['parser.js'][193] = 0;
  _$jscoverage['parser.js'][196] = 0;
  _$jscoverage['parser.js'][197] = 0;
  _$jscoverage['parser.js'][200] = 0;
  _$jscoverage['parser.js'][201] = 0;
  _$jscoverage['parser.js'][202] = 0;
  _$jscoverage['parser.js'][203] = 0;
  _$jscoverage['parser.js'][205] = 0;
  _$jscoverage['parser.js'][206] = 0;
  _$jscoverage['parser.js'][207] = 0;
  _$jscoverage['parser.js'][211] = 0;
  _$jscoverage['parser.js'][215] = 0;
  _$jscoverage['parser.js'][216] = 0;
  _$jscoverage['parser.js'][218] = 0;
  _$jscoverage['parser.js'][228] = 0;
  _$jscoverage['parser.js'][229] = 0;
  _$jscoverage['parser.js'][230] = 0;
  _$jscoverage['parser.js'][232] = 0;
  _$jscoverage['parser.js'][233] = 0;
  _$jscoverage['parser.js'][234] = 0;
  _$jscoverage['parser.js'][235] = 0;
  _$jscoverage['parser.js'][236] = 0;
  _$jscoverage['parser.js'][238] = 0;
  _$jscoverage['parser.js'][242] = 0;
  _$jscoverage['parser.js'][244] = 0;
}
_$jscoverage['parser.js'][16]++;
var packets = exports.packets = ["disconnect", "connect", "heartbeat", "message", "json", "event", "ack", "error"];
_$jscoverage['parser.js'][31]++;
var reasons = exports.reasons = ["transport not supported", "client not handshaken", "unauthorized"];
_$jscoverage['parser.js'][41]++;
var advice = exports.advice = ["reconnect"];
_$jscoverage['parser.js'][51]++;
exports.encodePacket = (function (packet) {
  _$jscoverage['parser.js'][52]++;
  var type = packets.indexOf(packet.type), id = packet.id || "", endpoint = packet.endpoint || "", ack = packet.ack, data = null;
  _$jscoverage['parser.js'][58]++;
  switch (packet.type) {
  case "error":
    _$jscoverage['parser.js'][60]++;
    var reason = packet.reason? reasons.indexOf(packet.reason): "", adv = packet.advice? advice.indexOf(packet.advice): "";
    _$jscoverage['parser.js'][63]++;
    if (reason !== "" || adv !== "") {
      _$jscoverage['parser.js'][64]++;
      data = reason + (adv !== ""? ("+" + adv): "");
    }
    _$jscoverage['parser.js'][66]++;
    break;
  case "message":
    _$jscoverage['parser.js'][69]++;
    if (packet.data !== "") {
      _$jscoverage['parser.js'][70]++;
      data = packet.data;
    }
    _$jscoverage['parser.js'][71]++;
    break;
  case "event":
    _$jscoverage['parser.js'][74]++;
    var ev = {name: packet.name};
    _$jscoverage['parser.js'][76]++;
    if (packet.args && packet.args.length) {
      _$jscoverage['parser.js'][77]++;
      ev.args = packet.args;
    }
    _$jscoverage['parser.js'][80]++;
    data = JSON.stringify(ev);
    _$jscoverage['parser.js'][81]++;
    break;
  case "json":
    _$jscoverage['parser.js'][84]++;
    data = JSON.stringify(packet.data);
    _$jscoverage['parser.js'][85]++;
    break;
  case "connect":
    _$jscoverage['parser.js'][88]++;
    if (packet.qs) {
      _$jscoverage['parser.js'][89]++;
      data = packet.qs;
    }
    _$jscoverage['parser.js'][90]++;
    break;
  case "ack":
    _$jscoverage['parser.js'][93]++;
    data = packet.ackId + (packet.args && packet.args.length? "+" + JSON.stringify(packet.args): "");
    _$jscoverage['parser.js'][96]++;
    break;
  case "heartbeat":
  case "disconect":
    _$jscoverage['parser.js'][100]++;
    break;
  }
  _$jscoverage['parser.js'][104]++;
  var encoded = [type, id + (ack == "data"? "+": ""), endpoint];
  _$jscoverage['parser.js'][111]++;
  if (data !== null && data !== undefined) {
    _$jscoverage['parser.js'][112]++;
    encoded.push(data);
  }
  _$jscoverage['parser.js'][114]++;
  return encoded.join(":");
});
_$jscoverage['parser.js'][124]++;
exports.encodePayload = (function (packets) {
  _$jscoverage['parser.js'][125]++;
  var decoded = "";
  _$jscoverage['parser.js'][127]++;
  if (packets.length == 1) {
    _$jscoverage['parser.js'][128]++;
    return packets[0];
  }
  _$jscoverage['parser.js'][130]++;
  for (var i = 0, l = packets.length; i < l; i++) {
    _$jscoverage['parser.js'][131]++;
    var packet = packets[i];
    _$jscoverage['parser.js'][132]++;
    decoded += "\ufffd" + packet.length + "\ufffd" + packets[i];
}
  _$jscoverage['parser.js'][135]++;
  return decoded;
});
_$jscoverage['parser.js'][144]++;
var regexp = /^([^:]+):([0-9]+)?(\+)?:([^:]+)?:?(.*)?$/;
_$jscoverage['parser.js'][146]++;
exports.decodePacket = (function (data) {
  _$jscoverage['parser.js'][147]++;
  var pieces = data.match(regexp);
  _$jscoverage['parser.js'][149]++;
  if (! pieces) {
    _$jscoverage['parser.js'][149]++;
    return ({});
  }
  _$jscoverage['parser.js'][151]++;
  var id = pieces[2] || "", data = pieces[5] || "", packet = {type: packets[pieces[1]], endpoint: pieces[4] || ""};
  _$jscoverage['parser.js'][159]++;
  if (id) {
    _$jscoverage['parser.js'][160]++;
    packet.id = id;
    _$jscoverage['parser.js'][161]++;
    if (pieces[3]) {
      _$jscoverage['parser.js'][162]++;
      packet.ack = "data";
    }
    else {
      _$jscoverage['parser.js'][164]++;
      packet.ack = true;
    }
  }
  _$jscoverage['parser.js'][168]++;
  switch (packet.type) {
  case "error":
    _$jscoverage['parser.js'][170]++;
    var pieces = data.split("+");
    _$jscoverage['parser.js'][171]++;
    packet.reason = reasons[pieces[0]] || "";
    _$jscoverage['parser.js'][172]++;
    packet.advice = advice[pieces[1]] || "";
    _$jscoverage['parser.js'][173]++;
    break;
  case "message":
    _$jscoverage['parser.js'][176]++;
    packet.data = data || "";
    _$jscoverage['parser.js'][177]++;
    break;
  case "event":
    _$jscoverage['parser.js'][180]++;
    try {
      _$jscoverage['parser.js'][181]++;
      var opts = JSON.parse(data);
      _$jscoverage['parser.js'][182]++;
      packet.name = opts.name;
      _$jscoverage['parser.js'][183]++;
      packet.args = opts.args;
    }
    catch (e) {
    }
    _$jscoverage['parser.js'][186]++;
    packet.args = packet.args || [];
    _$jscoverage['parser.js'][187]++;
    break;
  case "json":
    _$jscoverage['parser.js'][190]++;
    try {
      _$jscoverage['parser.js'][191]++;
      packet.data = JSON.parse(data);
    }
    catch (e) {
    }
    _$jscoverage['parser.js'][193]++;
    break;
  case "connect":
    _$jscoverage['parser.js'][196]++;
    packet.qs = data || "";
    _$jscoverage['parser.js'][197]++;
    break;
  case "ack":
    _$jscoverage['parser.js'][200]++;
    var pieces = data.match(/^([0-9]+)(\+)?(.*)/);
    _$jscoverage['parser.js'][201]++;
    if (pieces) {
      _$jscoverage['parser.js'][202]++;
      packet.ackId = pieces[1];
      _$jscoverage['parser.js'][203]++;
      packet.args = [];
      _$jscoverage['parser.js'][205]++;
      if (pieces[3]) {
        _$jscoverage['parser.js'][206]++;
        try {
          _$jscoverage['parser.js'][207]++;
          packet.args = pieces[3]? JSON.parse(pieces[3]): [];
        }
        catch (e) {
        }
      }
    }
    _$jscoverage['parser.js'][211]++;
    break;
  case "disconnect":
  case "heartbeat":
    _$jscoverage['parser.js'][215]++;
    break;
  }
  _$jscoverage['parser.js'][216]++;
  ;
  _$jscoverage['parser.js'][218]++;
  return packet;
});
_$jscoverage['parser.js'][228]++;
exports.decodePayload = (function (data) {
  _$jscoverage['parser.js'][229]++;
  if (data[0] == "\ufffd") {
    _$jscoverage['parser.js'][230]++;
    var ret = [];
    _$jscoverage['parser.js'][232]++;
    for (var i = 1, length = ""; i < data.length; i++) {
      _$jscoverage['parser.js'][233]++;
      if (data[i] == "\ufffd") {
        _$jscoverage['parser.js'][234]++;
        ret.push(exports.decodePacket(data.substr(i + 1).substr(0, length)));
        _$jscoverage['parser.js'][235]++;
        i += Number(length) + 1;
        _$jscoverage['parser.js'][236]++;
        length = "";
      }
      else {
        _$jscoverage['parser.js'][238]++;
        length += data[i];
      }
}
    _$jscoverage['parser.js'][242]++;
    return ret;
  }
  else {
    _$jscoverage['parser.js'][244]++;
    return [exports.decodePacket(data)];
  }
});
_$jscoverage['parser.js'].source = ["","/*!"," * socket.io-node"," * Copyright(c) 2011 LearnBoost &lt;dev@learnboost.com&gt;"," * MIT Licensed"," */","","/**"," * Module dependencies."," */","","/**"," * Packet types."," */","","var packets = exports.packets = [","    'disconnect'","  , 'connect'","  , 'heartbeat'","  , 'message'","  , 'json'","  , 'event'","  , 'ack'","  , 'error'","];","","/**"," * Errors reasons."," */","","var reasons = exports.reasons = [","    'transport not supported'","  , 'client not handshaken'","  , 'unauthorized'","];","","/**"," * Errors advice."," */","","var advice = exports.advice = [","    'reconnect'","];","","/**"," * Encodes a packet."," *"," * @api private"," */","","exports.encodePacket = function (packet) {","  var type = packets.indexOf(packet.type)","    , id = packet.id || ''","    , endpoint = packet.endpoint || ''","    , ack = packet.ack","    , data = null;","","  switch (packet.type) {","    case 'error':","      var reason = packet.reason ? reasons.indexOf(packet.reason) : ''","        , adv = packet.advice ? advice.indexOf(packet.advice) : ''","","      if (reason !== '' || adv !== '')","        data = reason + (adv !== '' ? ('+' + adv) : '')","","      break;","","    case 'message':","      if (packet.data !== '')","        data = packet.data;","      break;","","    case 'event':","      var ev = { name: packet.name };","","      if (packet.args &amp;&amp; packet.args.length) {","        ev.args = packet.args;","      }","","      data = JSON.stringify(ev);","      break;","","    case 'json':","      data = JSON.stringify(packet.data);","      break;","","    case 'connect':","      if (packet.qs)","        data = packet.qs;","      break;","","    case 'ack':","      data = packet.ackId","        + (packet.args &amp;&amp; packet.args.length","            ? '+' + JSON.stringify(packet.args) : '');","      break;","","    case 'heartbeat':","    case 'disconect':","      break;","  }","","  // construct packet with required fragments","  var encoded = [","      type","    , id + (ack == 'data' ? '+' : '')","    , endpoint","  ];","","  // data fragment is optional","  if (data !== null &amp;&amp; data !== undefined)","    encoded.push(data);","","  return encoded.join(':');","};","","/**"," * Encodes multiple messages (payload)."," *"," * @param {Array} messages"," * @api private"," */","","exports.encodePayload = function (packets) {","  var decoded = '';","","  if (packets.length == 1)","    return packets[0];","","  for (var i = 0, l = packets.length; i &lt; l; i++) {","    var packet = packets[i];","    decoded += '\\ufffd' + packet.length + '\\ufffd' + packets[i]","  }","","  return decoded;","};","","/**"," * Decodes a packet"," *"," * @api private"," */","","var regexp = /^([^:]+):([0-9]+)?(\\+)?:([^:]+)?:?(.*)?$/;","","exports.decodePacket = function (data) {","  var pieces = data.match(regexp);","","  if (!pieces) return {};","","  var id = pieces[2] || ''","    , data = pieces[5] || ''","    , packet = {","          type: packets[pieces[1]]","        , endpoint: pieces[4] || ''","      };","","  // whether we need to acknowledge the packet","  if (id) {","    packet.id = id;","    if (pieces[3])","      packet.ack = 'data';","    else","      packet.ack = true;","  }","","  // handle different packet types","  switch (packet.type) {","    case 'error':","      var pieces = data.split('+');","      packet.reason = reasons[pieces[0]] || '';","      packet.advice = advice[pieces[1]] || '';","      break;","","    case 'message':","      packet.data = data || '';","      break;","","    case 'event':","      try {","        var opts = JSON.parse(data);","        packet.name = opts.name;","        packet.args = opts.args;","      } catch (e) { }","","      packet.args = packet.args || [];","      break;","","    case 'json':","      try {","        packet.data = JSON.parse(data);","      } catch (e) { }","      break;","","    case 'connect':","      packet.qs = data || '';","      break;","","    case 'ack':","      var pieces = data.match(/^([0-9]+)(\\+)?(.*)/);","      if (pieces) {","        packet.ackId = pieces[1];","        packet.args = [];","","        if (pieces[3]) {","          try {","            packet.args = pieces[3] ? JSON.parse(pieces[3]) : [];","          } catch (e) { }","        }","      }","      break;","","    case 'disconnect':","    case 'heartbeat':","      break;","  };","","  return packet;","};","","/**"," * Decodes data payload. Detects multiple messages"," *"," * @return {Array} messages"," * @api public"," */","","exports.decodePayload = function (data) {","  if (data[0] == '\\ufffd') {","    var ret = [];","","    for (var i = 1, length = ''; i &lt; data.length; i++) {","      if (data[i] == '\\ufffd') {","        ret.push(exports.decodePacket(data.substr(i + 1).substr(0, length)));","        i += Number(length) + 1;","        length = '';","      } else {","        length += data[i];","      }","    }","","    return ret;","  } else {","    return [exports.decodePacket(data)];","  }","};"];
