/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['stores/memory.js']) {
  _$jscoverage['stores/memory.js'] = [];
  _$jscoverage['stores/memory.js'][12] = 0;
  _$jscoverage['stores/memory.js'][19] = 0;
  _$jscoverage['stores/memory.js'][20] = 0;
  _$jscoverage['stores/memory.js'][28] = 0;
  _$jscoverage['stores/memory.js'][29] = 0;
  _$jscoverage['stores/memory.js'][30] = 0;
  _$jscoverage['stores/memory.js'][31] = 0;
  _$jscoverage['stores/memory.js'][32] = 0;
  _$jscoverage['stores/memory.js'][38] = 0;
  _$jscoverage['stores/memory.js'][48] = 0;
  _$jscoverage['stores/memory.js'][49] = 0;
  _$jscoverage['stores/memory.js'][50] = 0;
  _$jscoverage['stores/memory.js'][51] = 0;
  _$jscoverage['stores/memory.js'][52] = 0;
  _$jscoverage['stores/memory.js'][61] = 0;
  _$jscoverage['stores/memory.js'][62] = 0;
  _$jscoverage['stores/memory.js'][63] = 0;
  _$jscoverage['stores/memory.js'][72] = 0;
  _$jscoverage['stores/memory.js'][73] = 0;
  _$jscoverage['stores/memory.js'][74] = 0;
  _$jscoverage['stores/memory.js'][83] = 0;
  _$jscoverage['stores/memory.js'][84] = 0;
  _$jscoverage['stores/memory.js'][85] = 0;
  _$jscoverage['stores/memory.js'][86] = 0;
  _$jscoverage['stores/memory.js'][89] = 0;
  _$jscoverage['stores/memory.js'][98] = 0;
  _$jscoverage['stores/memory.js'][99] = 0;
  _$jscoverage['stores/memory.js'][100] = 0;
  _$jscoverage['stores/memory.js'][102] = 0;
  _$jscoverage['stores/memory.js'][103] = 0;
  _$jscoverage['stores/memory.js'][104] = 0;
  _$jscoverage['stores/memory.js'][106] = 0;
  _$jscoverage['stores/memory.js'][107] = 0;
  _$jscoverage['stores/memory.js'][109] = 0;
  _$jscoverage['stores/memory.js'][112] = 0;
  _$jscoverage['stores/memory.js'][121] = 0;
  _$jscoverage['stores/memory.js'][122] = 0;
  _$jscoverage['stores/memory.js'][131] = 0;
  _$jscoverage['stores/memory.js'][132] = 0;
  _$jscoverage['stores/memory.js'][141] = 0;
  _$jscoverage['stores/memory.js'][142] = 0;
  _$jscoverage['stores/memory.js'][143] = 0;
  _$jscoverage['stores/memory.js'][144] = 0;
  _$jscoverage['stores/memory.js'][147] = 0;
  _$jscoverage['stores/memory.js'][156] = 0;
  _$jscoverage['stores/memory.js'][157] = 0;
  _$jscoverage['stores/memory.js'][158] = 0;
  _$jscoverage['stores/memory.js'][161] = 0;
  _$jscoverage['stores/memory.js'][162] = 0;
  _$jscoverage['stores/memory.js'][164] = 0;
  _$jscoverage['stores/memory.js'][166] = 0;
  _$jscoverage['stores/memory.js'][175] = 0;
  _$jscoverage['stores/memory.js'][176] = 0;
  _$jscoverage['stores/memory.js'][177] = 0;
  _$jscoverage['stores/memory.js'][180] = 0;
  _$jscoverage['stores/memory.js'][181] = 0;
  _$jscoverage['stores/memory.js'][182] = 0;
  _$jscoverage['stores/memory.js'][184] = 0;
  _$jscoverage['stores/memory.js'][186] = 0;
  _$jscoverage['stores/memory.js'][195] = 0;
  _$jscoverage['stores/memory.js'][196] = 0;
  _$jscoverage['stores/memory.js'][197] = 0;
  _$jscoverage['stores/memory.js'][198] = 0;
  _$jscoverage['stores/memory.js'][201] = 0;
  _$jscoverage['stores/memory.js'][202] = 0;
  _$jscoverage['stores/memory.js'][204] = 0;
  _$jscoverage['stores/memory.js'][213] = 0;
  _$jscoverage['stores/memory.js'][214] = 0;
  _$jscoverage['stores/memory.js'][215] = 0;
  _$jscoverage['stores/memory.js'][224] = 0;
  _$jscoverage['stores/memory.js'][225] = 0;
  _$jscoverage['stores/memory.js'][234] = 0;
  _$jscoverage['stores/memory.js'][235] = 0;
  _$jscoverage['stores/memory.js'][236] = 0;
  _$jscoverage['stores/memory.js'][237] = 0;
  _$jscoverage['stores/memory.js'][238] = 0;
  _$jscoverage['stores/memory.js'][239] = 0;
  _$jscoverage['stores/memory.js'][245] = 0;
  _$jscoverage['stores/memory.js'][253] = 0;
  _$jscoverage['stores/memory.js'][254] = 0;
  _$jscoverage['stores/memory.js'][255] = 0;
  _$jscoverage['stores/memory.js'][264] = 0;
  _$jscoverage['stores/memory.js'][265] = 0;
  _$jscoverage['stores/memory.js'][266] = 0;
  _$jscoverage['stores/memory.js'][268] = 0;
  _$jscoverage['stores/memory.js'][269] = 0;
  _$jscoverage['stores/memory.js'][270] = 0;
  _$jscoverage['stores/memory.js'][273] = 0;
  _$jscoverage['stores/memory.js'][283] = 0;
  _$jscoverage['stores/memory.js'][284] = 0;
  _$jscoverage['stores/memory.js'][285] = 0;
  _$jscoverage['stores/memory.js'][287] = 0;
  _$jscoverage['stores/memory.js'][290] = 0;
  _$jscoverage['stores/memory.js'][299] = 0;
  _$jscoverage['stores/memory.js'][300] = 0;
  _$jscoverage['stores/memory.js'][301] = 0;
  _$jscoverage['stores/memory.js'][310] = 0;
  _$jscoverage['stores/memory.js'][311] = 0;
  _$jscoverage['stores/memory.js'][320] = 0;
  _$jscoverage['stores/memory.js'][321] = 0;
  _$jscoverage['stores/memory.js'][322] = 0;
  _$jscoverage['stores/memory.js'][331] = 0;
  _$jscoverage['stores/memory.js'][332] = 0;
  _$jscoverage['stores/memory.js'][333] = 0;
  _$jscoverage['stores/memory.js'][334] = 0;
  _$jscoverage['stores/memory.js'][343] = 0;
  _$jscoverage['stores/memory.js'][344] = 0;
}
_$jscoverage['stores/memory.js'][12]++;
var crypto = require("crypto"), Store = require("../store");
_$jscoverage['stores/memory.js'][19]++;
exports = module.exports = Memory;
_$jscoverage['stores/memory.js'][20]++;
Memory.Client = Client;
_$jscoverage['stores/memory.js'][28]++;
function Memory(opts) {
  _$jscoverage['stores/memory.js'][29]++;
  this.handshaken = [];
  _$jscoverage['stores/memory.js'][30]++;
  this.clientsMap = {};
  _$jscoverage['stores/memory.js'][31]++;
  this.rooms = {};
}
_$jscoverage['stores/memory.js'][32]++;
;
_$jscoverage['stores/memory.js'][38]++;
Memory.prototype.__proto__ = Store.prototype;
_$jscoverage['stores/memory.js'][48]++;
Memory.prototype.handshake = (function (data, fn) {
  _$jscoverage['stores/memory.js'][49]++;
  var id = this.generateId();
  _$jscoverage['stores/memory.js'][50]++;
  this.handshaken.push(id);
  _$jscoverage['stores/memory.js'][51]++;
  fn(null, id);
  _$jscoverage['stores/memory.js'][52]++;
  return this;
});
_$jscoverage['stores/memory.js'][61]++;
Memory.prototype.isHandshaken = (function (id, fn) {
  _$jscoverage['stores/memory.js'][62]++;
  fn(null, ~ this.handshaken.indexOf(id));
  _$jscoverage['stores/memory.js'][63]++;
  return this;
});
_$jscoverage['stores/memory.js'][72]++;
Memory.prototype.generateId = (function () {
  _$jscoverage['stores/memory.js'][73]++;
  var rand = String(Math.random() * Math.random() * Date.now());
  _$jscoverage['stores/memory.js'][74]++;
  return crypto.createHash("md5").update(rand).digest("hex");
});
_$jscoverage['stores/memory.js'][83]++;
Memory.prototype.client = (function (id) {
  _$jscoverage['stores/memory.js'][84]++;
  if (! this.clientsMap[id]) {
    _$jscoverage['stores/memory.js'][85]++;
    this.clientsMap[id] = new Memory.Client(this, id);
    _$jscoverage['stores/memory.js'][86]++;
    this.log.debug("initializing client store for", id);
  }
  _$jscoverage['stores/memory.js'][89]++;
  return this.clientsMap[id];
});
_$jscoverage['stores/memory.js'][98]++;
Memory.prototype.disconnect = (function (id, force, reason) {
  _$jscoverage['stores/memory.js'][99]++;
  if (~ this.handshaken.indexOf(id)) {
    _$jscoverage['stores/memory.js'][100]++;
    this.log.debug("destroying dispatcher for", id);
    _$jscoverage['stores/memory.js'][102]++;
    this.handshaken.splice(this.handshaken.indexOf(id), 1);
    _$jscoverage['stores/memory.js'][103]++;
    this.clientsMap[id].destroy();
    _$jscoverage['stores/memory.js'][104]++;
    this.clientsMap[id] = null;
    _$jscoverage['stores/memory.js'][106]++;
    if (force) {
      _$jscoverage['stores/memory.js'][107]++;
      this.publish("disconnect-force:" + id, reason);
    }
    _$jscoverage['stores/memory.js'][109]++;
    this.publish("disconnect:" + id, reason);
  }
  _$jscoverage['stores/memory.js'][112]++;
  return this;
});
_$jscoverage['stores/memory.js'][121]++;
Memory.prototype.heartbeat = (function (id) {
  _$jscoverage['stores/memory.js'][122]++;
  return this.publish("heartbeat-clear:" + id);
});
_$jscoverage['stores/memory.js'][131]++;
Memory.prototype.message = (function (id, packet) {
  _$jscoverage['stores/memory.js'][132]++;
  return this.publish("message:" + id, packet);
});
_$jscoverage['stores/memory.js'][141]++;
Memory.prototype.clients = (function (room, fn) {
  _$jscoverage['stores/memory.js'][142]++;
  if ("function" == typeof room) {
    _$jscoverage['stores/memory.js'][143]++;
    fn = room;
    _$jscoverage['stores/memory.js'][144]++;
    room = "";
  }
  _$jscoverage['stores/memory.js'][147]++;
  fn && fn(this.rooms[room] || []);
});
_$jscoverage['stores/memory.js'][156]++;
Memory.prototype.join = (function (sid, room, fn) {
  _$jscoverage['stores/memory.js'][157]++;
  if (! this.rooms[room]) {
    _$jscoverage['stores/memory.js'][158]++;
    this.rooms[room] = [];
  }
  _$jscoverage['stores/memory.js'][161]++;
  this.client(sid).rooms[room] = this.rooms[room].length;
  _$jscoverage['stores/memory.js'][162]++;
  this.rooms[room].push(sid);
  _$jscoverage['stores/memory.js'][164]++;
  fn && fn();
  _$jscoverage['stores/memory.js'][166]++;
  return this;
});
_$jscoverage['stores/memory.js'][175]++;
Memory.prototype.leave = (function (sid, room, fn) {
  _$jscoverage['stores/memory.js'][176]++;
  if (! this.rooms[room] || this.client(sid).rooms[room] === undefined) {
    _$jscoverage['stores/memory.js'][177]++;
    return this;
  }
  _$jscoverage['stores/memory.js'][180]++;
  var i = this.client(sid).rooms[room];
  _$jscoverage['stores/memory.js'][181]++;
  this.rooms[room][i] = null;
  _$jscoverage['stores/memory.js'][182]++;
  delete this.client(sid).rooms[room];
  _$jscoverage['stores/memory.js'][184]++;
  fn && fn();
  _$jscoverage['stores/memory.js'][186]++;
  return this;
});
_$jscoverage['stores/memory.js'][195]++;
Memory.prototype.publish = (function (ev, data, fn) {
  _$jscoverage['stores/memory.js'][196]++;
  if ("function" == typeof data) {
    _$jscoverage['stores/memory.js'][197]++;
    fn = data;
    _$jscoverage['stores/memory.js'][198]++;
    data = undefined;
  }
  _$jscoverage['stores/memory.js'][201]++;
  this.emit(ev, data);
  _$jscoverage['stores/memory.js'][202]++;
  if (fn) {
    _$jscoverage['stores/memory.js'][202]++;
    fn();
  }
  _$jscoverage['stores/memory.js'][204]++;
  return this;
});
_$jscoverage['stores/memory.js'][213]++;
Memory.prototype.subscribe = (function (chn, fn) {
  _$jscoverage['stores/memory.js'][214]++;
  this.on(chn, fn);
  _$jscoverage['stores/memory.js'][215]++;
  return this;
});
_$jscoverage['stores/memory.js'][224]++;
Memory.prototype.unsubscribe = (function (chn) {
  _$jscoverage['stores/memory.js'][225]++;
  this.removeAllListeners(chn);
});
_$jscoverage['stores/memory.js'][234]++;
function Client() {
  _$jscoverage['stores/memory.js'][235]++;
  Store.Client.apply(this, arguments);
  _$jscoverage['stores/memory.js'][236]++;
  this.reqs = 0;
  _$jscoverage['stores/memory.js'][237]++;
  this.paused = true;
  _$jscoverage['stores/memory.js'][238]++;
  this.rooms = {};
}
_$jscoverage['stores/memory.js'][239]++;
;
_$jscoverage['stores/memory.js'][245]++;
Client.prototype.__proto__ = Store.Client;
_$jscoverage['stores/memory.js'][253]++;
Client.prototype.count = (function (fn) {
  _$jscoverage['stores/memory.js'][254]++;
  fn(null, ++this.reqs);
  _$jscoverage['stores/memory.js'][255]++;
  return this;
});
_$jscoverage['stores/memory.js'][264]++;
Client.prototype.consume = (function (fn) {
  _$jscoverage['stores/memory.js'][265]++;
  this.consumer = fn;
  _$jscoverage['stores/memory.js'][266]++;
  this.paused = false;
  _$jscoverage['stores/memory.js'][268]++;
  if (this.buffer.length) {
    _$jscoverage['stores/memory.js'][269]++;
    fn(this.buffer, null);
    _$jscoverage['stores/memory.js'][270]++;
    this.buffer = [];
  }
  _$jscoverage['stores/memory.js'][273]++;
  return this;
});
_$jscoverage['stores/memory.js'][283]++;
Client.prototype.publish = (function (msg) {
  _$jscoverage['stores/memory.js'][284]++;
  if (this.paused) {
    _$jscoverage['stores/memory.js'][285]++;
    this.buffer.push(msg);
  }
  else {
    _$jscoverage['stores/memory.js'][287]++;
    this.consumer(null, msg);
  }
  _$jscoverage['stores/memory.js'][290]++;
  return this;
});
_$jscoverage['stores/memory.js'][299]++;
Client.prototype.pause = (function () {
  _$jscoverage['stores/memory.js'][300]++;
  this.paused = true;
  _$jscoverage['stores/memory.js'][301]++;
  return this;
});
_$jscoverage['stores/memory.js'][310]++;
Client.prototype.destroy = (function () {
  _$jscoverage['stores/memory.js'][311]++;
  this.buffer = null;
});
_$jscoverage['stores/memory.js'][320]++;
Client.prototype.get = (function (key, fn) {
  _$jscoverage['stores/memory.js'][321]++;
  fn(null, this.dict[key]);
  _$jscoverage['stores/memory.js'][322]++;
  return this;
});
_$jscoverage['stores/memory.js'][331]++;
Client.prototype.set = (function (key, value, fn) {
  _$jscoverage['stores/memory.js'][332]++;
  this.dict[key] = value;
  _$jscoverage['stores/memory.js'][333]++;
  fn && fn(null);
  _$jscoverage['stores/memory.js'][334]++;
  return this;
});
_$jscoverage['stores/memory.js'][343]++;
Client.prototype.onMessage = (function (msg) {
  _$jscoverage['stores/memory.js'][344]++;
  this.store.emit("message:" + id, msg);
});
_$jscoverage['stores/memory.js'].source = ["","/*!"," * socket.io-node"," * Copyright(c) 2011 LearnBoost &lt;dev@learnboost.com&gt;"," * MIT Licensed"," */","","/**"," * Module dependencies."," */","","var crypto = require('crypto')","  , Store = require('../store')","","/**"," * Exports the constructor."," */","","exports = module.exports = Memory;","Memory.Client = Client;","","/**"," * Memory store"," *"," * @api public"," */","","function Memory (opts) {","  this.handshaken = [];","  this.clientsMap = {};","  this.rooms = {};","};","","/**"," * Inherits from Store."," */","","Memory.prototype.__proto__ = Store.prototype;","","/**"," * Handshake a client."," *"," * @param {Object} client request object"," * @param {Function} callback"," * @api public"," */","","Memory.prototype.handshake = function (data, fn) {","  var id = this.generateId();","  this.handshaken.push(id);","  fn(null, id);","  return this;","};","","/**"," * Checks if a client is handshaken."," *"," * @api public"," */","","Memory.prototype.isHandshaken = function (id, fn) {","  fn(null, ~this.handshaken.indexOf(id));","  return this;","};","","/**"," * Generates a random id."," *"," * @api private"," */","","Memory.prototype.generateId = function () {","  var rand = String(Math.random() * Math.random() * Date.now());","  return crypto.createHash('md5').update(rand).digest('hex');","};","","/**"," * Retrieves a client store instance."," *"," * @api public"," */","","Memory.prototype.client = function (id) {","  if (!this.clientsMap[id]) {","    this.clientsMap[id] = new Memory.Client(this, id);","    this.log.debug('initializing client store for', id);","  }","","  return this.clientsMap[id];","};","","/**"," * Called when a client disconnects."," *"," * @api public"," */","","Memory.prototype.disconnect = function (id, force, reason) {","  if (~this.handshaken.indexOf(id)) {","    this.log.debug('destroying dispatcher for', id);","","    this.handshaken.splice(this.handshaken.indexOf(id), 1);","    this.clientsMap[id].destroy();","    this.clientsMap[id] = null;","","    if (force)","      this.publish('disconnect-force:' + id, reason);","","    this.publish('disconnect:' + id, reason);","  }","","  return this;","};","","/**"," * Relays a heartbeat message."," *"," * @api private"," */","","Memory.prototype.heartbeat = function (id) {","  return this.publish('heartbeat-clear:' + id);","};","","/**"," * Relays a packet"," *"," * @api private"," */","","Memory.prototype.message = function (id, packet) {","  return this.publish('message:' + id, packet);","};","","/**"," * Returns client ids in a particular room"," *"," * @api public"," */","","Memory.prototype.clients = function (room, fn) {","  if ('function' == typeof room) {","    fn = room;","    room = '';","  }","","  fn &amp;&amp; fn(this.rooms[room] || []);","};","","/**"," * Joins a user to a room"," *"," * @api private"," */","","Memory.prototype.join = function (sid, room, fn) {","  if (!this.rooms[room]) {","    this.rooms[room] = [];","  }","","  this.client(sid).rooms[room] = this.rooms[room].length;","  this.rooms[room].push(sid);","","  fn &amp;&amp; fn();","","  return this;","};","","/**"," * Removes a user from a room"," *"," * @api private"," */","","Memory.prototype.leave = function (sid, room, fn) {","  if (!this.rooms[room] || this.client(sid).rooms[room] === undefined) {","    return this;","  }","","  var i = this.client(sid).rooms[room];","  this.rooms[room][i] = null;","  delete this.client(sid).rooms[room];","","  fn &amp;&amp; fn();","","  return this;","};","","/**"," * Simple publish"," *"," * @api public"," */","","Memory.prototype.publish = function (ev, data, fn) {","  if ('function' == typeof data) {","    fn = data;","    data = undefined;","  }","","  this.emit(ev, data);","  if (fn) fn();","","  return this;","};","","/**"," * Simple subscribe"," *"," * @api public"," */","","Memory.prototype.subscribe = function (chn, fn) {","  this.on(chn, fn);","  return this;","};","","/**"," * Simple unsubscribe"," *"," * @api public"," */","","Memory.prototype.unsubscribe = function (chn) {","  this.removeAllListeners(chn);","};","","/**"," * Client constructor"," *"," * @api private"," */","","function Client () {","  Store.Client.apply(this, arguments);","  this.reqs = 0;","  this.paused = true;","  this.rooms = {};","};","","/**"," * Inherits from Store.Client"," */","","Client.prototype.__proto__ = Store.Client;","","/**"," * Counts transport requests."," *"," * @api public"," */","","Client.prototype.count = function (fn) {","  fn(null, ++this.reqs);","  return this;","};","","/**"," * Sets up queue consumption"," *"," * @api public"," */","","Client.prototype.consume = function (fn) {","  this.consumer = fn;","  this.paused = false;","","  if (this.buffer.length) {","    fn(this.buffer, null);","    this.buffer = [];","  }","","  return this;","};","","/**"," * Publishes a message to be sent to the client."," *"," * @String encoded message"," * @api public"," */","","Client.prototype.publish = function (msg) {","  if (this.paused) {","    this.buffer.push(msg);","  } else {","    this.consumer(null, msg);","  }","","  return this;","};","","/**"," * Pauses the stream."," *"," * @api public"," */","","Client.prototype.pause = function () {","  this.paused = true;","  return this;","};","","/**"," * Destroys the client."," *"," * @api public"," */","","Client.prototype.destroy = function () {","  this.buffer = null;","};","","/**"," * Gets a key"," *"," * @api public"," */","","Client.prototype.get = function (key, fn) {","  fn(null, this.dict[key]);","  return this;","};","","/**"," * Sets a key"," *"," * @api public"," */","","Client.prototype.set = function (key, value, fn) {","  this.dict[key] = value;","  fn &amp;&amp; fn(null);","  return this;","};","","/**"," * Emits a message incoming from client."," *"," * @api private"," */","","Client.prototype.onMessage = function (msg) {","  this.store.emit('message:' + id, msg);","};",""];
