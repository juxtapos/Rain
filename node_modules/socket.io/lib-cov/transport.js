/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['transport.js']) {
  _$jscoverage['transport.js'] = [];
  _$jscoverage['transport.js'][12] = 0;
  _$jscoverage['transport.js'][18] = 0;
  _$jscoverage['transport.js'][26] = 0;
  _$jscoverage['transport.js'][27] = 0;
  _$jscoverage['transport.js'][28] = 0;
  _$jscoverage['transport.js'][29] = 0;
  _$jscoverage['transport.js'][30] = 0;
  _$jscoverage['transport.js'][31] = 0;
  _$jscoverage['transport.js'][32] = 0;
  _$jscoverage['transport.js'][38] = 0;
  _$jscoverage['transport.js'][39] = 0;
  _$jscoverage['transport.js'][40] = 0;
  _$jscoverage['transport.js'][49] = 0;
  _$jscoverage['transport.js'][50] = 0;
  _$jscoverage['transport.js'][59] = 0;
  _$jscoverage['transport.js'][60] = 0;
  _$jscoverage['transport.js'][69] = 0;
  _$jscoverage['transport.js'][70] = 0;
  _$jscoverage['transport.js'][72] = 0;
  _$jscoverage['transport.js'][73] = 0;
  _$jscoverage['transport.js'][74] = 0;
  _$jscoverage['transport.js'][75] = 0;
  _$jscoverage['transport.js'][77] = 0;
  _$jscoverage['transport.js'][79] = 0;
  _$jscoverage['transport.js'][81] = 0;
  _$jscoverage['transport.js'][82] = 0;
  _$jscoverage['transport.js'][83] = 0;
  _$jscoverage['transport.js'][84] = 0;
  _$jscoverage['transport.js'][85] = 0;
  _$jscoverage['transport.js'][86] = 0;
  _$jscoverage['transport.js'][89] = 0;
  _$jscoverage['transport.js'][90] = 0;
  _$jscoverage['transport.js'][94] = 0;
  _$jscoverage['transport.js'][95] = 0;
  _$jscoverage['transport.js'][105] = 0;
  _$jscoverage['transport.js'][113] = 0;
  _$jscoverage['transport.js'][114] = 0;
  _$jscoverage['transport.js'][116] = 0;
  _$jscoverage['transport.js'][117] = 0;
  _$jscoverage['transport.js'][120] = 0;
  _$jscoverage['transport.js'][121] = 0;
  _$jscoverage['transport.js'][122] = 0;
  _$jscoverage['transport.js'][125] = 0;
  _$jscoverage['transport.js'][126] = 0;
  _$jscoverage['transport.js'][129] = 0;
  _$jscoverage['transport.js'][136] = 0;
  _$jscoverage['transport.js'][137] = 0;
  _$jscoverage['transport.js'][138] = 0;
  _$jscoverage['transport.js'][139] = 0;
  _$jscoverage['transport.js'][148] = 0;
  _$jscoverage['transport.js'][149] = 0;
  _$jscoverage['transport.js'][150] = 0;
  _$jscoverage['transport.js'][151] = 0;
  _$jscoverage['transport.js'][153] = 0;
  _$jscoverage['transport.js'][154] = 0;
  _$jscoverage['transport.js'][155] = 0;
  _$jscoverage['transport.js'][156] = 0;
  _$jscoverage['transport.js'][165] = 0;
  _$jscoverage['transport.js'][169] = 0;
  _$jscoverage['transport.js'][178] = 0;
  _$jscoverage['transport.js'][179] = 0;
  _$jscoverage['transport.js'][188] = 0;
  _$jscoverage['transport.js'][189] = 0;
  _$jscoverage['transport.js'][190] = 0;
  _$jscoverage['transport.js'][191] = 0;
  _$jscoverage['transport.js'][194] = 0;
  _$jscoverage['transport.js'][203] = 0;
  _$jscoverage['transport.js'][204] = 0;
  _$jscoverage['transport.js'][213] = 0;
  _$jscoverage['transport.js'][214] = 0;
  _$jscoverage['transport.js'][215] = 0;
  _$jscoverage['transport.js'][216] = 0;
  _$jscoverage['transport.js'][217] = 0;
  _$jscoverage['transport.js'][219] = 0;
  _$jscoverage['transport.js'][227] = 0;
  _$jscoverage['transport.js'][228] = 0;
  _$jscoverage['transport.js'][229] = 0;
  _$jscoverage['transport.js'][231] = 0;
  _$jscoverage['transport.js'][232] = 0;
  _$jscoverage['transport.js'][233] = 0;
  _$jscoverage['transport.js'][234] = 0;
  _$jscoverage['transport.js'][237] = 0;
  _$jscoverage['transport.js'][245] = 0;
  _$jscoverage['transport.js'][246] = 0;
  _$jscoverage['transport.js'][247] = 0;
  _$jscoverage['transport.js'][248] = 0;
  _$jscoverage['transport.js'][250] = 0;
  _$jscoverage['transport.js'][258] = 0;
  _$jscoverage['transport.js'][259] = 0;
  _$jscoverage['transport.js'][260] = 0;
  _$jscoverage['transport.js'][262] = 0;
  _$jscoverage['transport.js'][263] = 0;
  _$jscoverage['transport.js'][264] = 0;
  _$jscoverage['transport.js'][265] = 0;
  _$jscoverage['transport.js'][268] = 0;
  _$jscoverage['transport.js'][278] = 0;
  _$jscoverage['transport.js'][279] = 0;
  _$jscoverage['transport.js'][280] = 0;
  _$jscoverage['transport.js'][281] = 0;
  _$jscoverage['transport.js'][282] = 0;
  _$jscoverage['transport.js'][293] = 0;
  _$jscoverage['transport.js'][294] = 0;
  _$jscoverage['transport.js'][295] = 0;
  _$jscoverage['transport.js'][297] = 0;
  _$jscoverage['transport.js'][298] = 0;
  _$jscoverage['transport.js'][301] = 0;
  _$jscoverage['transport.js'][311] = 0;
  _$jscoverage['transport.js'][312] = 0;
  _$jscoverage['transport.js'][313] = 0;
  _$jscoverage['transport.js'][314] = 0;
  _$jscoverage['transport.js'][323] = 0;
  _$jscoverage['transport.js'][324] = 0;
  _$jscoverage['transport.js'][325] = 0;
  _$jscoverage['transport.js'][326] = 0;
  _$jscoverage['transport.js'][327] = 0;
  _$jscoverage['transport.js'][330] = 0;
  _$jscoverage['transport.js'][340] = 0;
  _$jscoverage['transport.js'][341] = 0;
  _$jscoverage['transport.js'][342] = 0;
  _$jscoverage['transport.js'][343] = 0;
  _$jscoverage['transport.js'][344] = 0;
  _$jscoverage['transport.js'][345] = 0;
  _$jscoverage['transport.js'][346] = 0;
  _$jscoverage['transport.js'][348] = 0;
  _$jscoverage['transport.js'][350] = 0;
  _$jscoverage['transport.js'][351] = 0;
  _$jscoverage['transport.js'][352] = 0;
  _$jscoverage['transport.js'][359] = 0;
  _$jscoverage['transport.js'][369] = 0;
  _$jscoverage['transport.js'][370] = 0;
  _$jscoverage['transport.js'][371] = 0;
  _$jscoverage['transport.js'][372] = 0;
  _$jscoverage['transport.js'][373] = 0;
  _$jscoverage['transport.js'][383] = 0;
  _$jscoverage['transport.js'][384] = 0;
  _$jscoverage['transport.js'][385] = 0;
  _$jscoverage['transport.js'][387] = 0;
  _$jscoverage['transport.js'][396] = 0;
  _$jscoverage['transport.js'][397] = 0;
  _$jscoverage['transport.js'][398] = 0;
  _$jscoverage['transport.js'][399] = 0;
  _$jscoverage['transport.js'][409] = 0;
  _$jscoverage['transport.js'][410] = 0;
  _$jscoverage['transport.js'][411] = 0;
  _$jscoverage['transport.js'][412] = 0;
  _$jscoverage['transport.js'][413] = 0;
  _$jscoverage['transport.js'][423] = 0;
  _$jscoverage['transport.js'][424] = 0;
  _$jscoverage['transport.js'][425] = 0;
  _$jscoverage['transport.js'][426] = 0;
  _$jscoverage['transport.js'][427] = 0;
  _$jscoverage['transport.js'][429] = 0;
  _$jscoverage['transport.js'][430] = 0;
  _$jscoverage['transport.js'][432] = 0;
  _$jscoverage['transport.js'][442] = 0;
  _$jscoverage['transport.js'][443] = 0;
  _$jscoverage['transport.js'][444] = 0;
  _$jscoverage['transport.js'][445] = 0;
  _$jscoverage['transport.js'][446] = 0;
  _$jscoverage['transport.js'][449] = 0;
  _$jscoverage['transport.js'][458] = 0;
  _$jscoverage['transport.js'][459] = 0;
  _$jscoverage['transport.js'][460] = 0;
  _$jscoverage['transport.js'][471] = 0;
  _$jscoverage['transport.js'][472] = 0;
  _$jscoverage['transport.js'][478] = 0;
  _$jscoverage['transport.js'][479] = 0;
  _$jscoverage['transport.js'][488] = 0;
  _$jscoverage['transport.js'][489] = 0;
  _$jscoverage['transport.js'][498] = 0;
  _$jscoverage['transport.js'][499] = 0;
  _$jscoverage['transport.js'][500] = 0;
  _$jscoverage['transport.js'][502] = 0;
  _$jscoverage['transport.js'][505] = 0;
  _$jscoverage['transport.js'][506] = 0;
  _$jscoverage['transport.js'][507] = 0;
  _$jscoverage['transport.js'][509] = 0;
  _$jscoverage['transport.js'][513] = 0;
  _$jscoverage['transport.js'][523] = 0;
  _$jscoverage['transport.js'][524] = 0;
  _$jscoverage['transport.js'][525] = 0;
  _$jscoverage['transport.js'][527] = 0;
  _$jscoverage['transport.js'][528] = 0;
  _$jscoverage['transport.js'][538] = 0;
  _$jscoverage['transport.js'][539] = 0;
  _$jscoverage['transport.js'][540] = 0;
  _$jscoverage['transport.js'][541] = 0;
  _$jscoverage['transport.js'][543] = 0;
  _$jscoverage['transport.js'][546] = 0;
}
_$jscoverage['transport.js'][12]++;
var parser = require("./parser");
_$jscoverage['transport.js'][18]++;
exports = module.exports = Transport;
_$jscoverage['transport.js'][26]++;
function Transport(mng, data) {
  _$jscoverage['transport.js'][27]++;
  this.manager = mng;
  _$jscoverage['transport.js'][28]++;
  this.id = data.id;
  _$jscoverage['transport.js'][29]++;
  this.paused = true;
  _$jscoverage['transport.js'][30]++;
  this.disconnected = false;
  _$jscoverage['transport.js'][31]++;
  this.drained = true;
}
_$jscoverage['transport.js'][32]++;
;
_$jscoverage['transport.js'][38]++;
Transport.prototype.__defineSetter__("request", (function (req) {
  _$jscoverage['transport.js'][39]++;
  this.log.debug("setting request", req.method, req.url);
  _$jscoverage['transport.js'][40]++;
  this.handleRequest(req);
}));
_$jscoverage['transport.js'][49]++;
Transport.prototype.__defineGetter__("log", (function () {
  _$jscoverage['transport.js'][50]++;
  return this.manager.log;
}));
_$jscoverage['transport.js'][59]++;
Transport.prototype.__defineGetter__("store", (function () {
  _$jscoverage['transport.js'][60]++;
  return this.manager.store;
}));
_$jscoverage['transport.js'][69]++;
Transport.prototype.handleRequest = (function (req) {
  _$jscoverage['transport.js'][70]++;
  this.req = req;
  _$jscoverage['transport.js'][72]++;
  if (req.method == "GET") {
    _$jscoverage['transport.js'][73]++;
    this.socket = req.socket;
    _$jscoverage['transport.js'][74]++;
    this.open = true;
    _$jscoverage['transport.js'][75]++;
    this.drained = true;
    _$jscoverage['transport.js'][77]++;
    this.log.debug("publishing that", this.id, "connected");
    _$jscoverage['transport.js'][79]++;
    var self = this;
    _$jscoverage['transport.js'][81]++;
    this.store.publish("open:" + this.id, (function () {
  _$jscoverage['transport.js'][82]++;
  self.store.once("open:" + self.id, (function () {
  _$jscoverage['transport.js'][83]++;
  self.log.info("request for existing session connection change");
  _$jscoverage['transport.js'][84]++;
  self.close();
  _$jscoverage['transport.js'][85]++;
  self.clearTimeouts();
  _$jscoverage['transport.js'][86]++;
  self.clearHandlers();
}));
  _$jscoverage['transport.js'][89]++;
  if (! self.paused) {
    _$jscoverage['transport.js'][90]++;
    self.subscribe();
  }
}));
    _$jscoverage['transport.js'][94]++;
    this.setHandlers();
    _$jscoverage['transport.js'][95]++;
    this.onSocketConnect();
  }
});
_$jscoverage['transport.js'][105]++;
Transport.prototype.onSocketConnect = (function () {
});
_$jscoverage['transport.js'][113]++;
Transport.prototype.setHandlers = (function () {
  _$jscoverage['transport.js'][114]++;
  var self = this;
  _$jscoverage['transport.js'][116]++;
  this.store.once("disconnect-force:" + this.id, (function () {
  _$jscoverage['transport.js'][117]++;
  self.onForcedDisconnect();
}));
  _$jscoverage['transport.js'][120]++;
  this.store.on("heartbeat-clear:" + this.id, (function () {
  _$jscoverage['transport.js'][121]++;
  self.clearHeartbeatTimeout();
  _$jscoverage['transport.js'][122]++;
  self.setHeartbeatInterval();
}));
  _$jscoverage['transport.js'][125]++;
  this.store.on("volatile:" + this.id, (function (packet) {
  _$jscoverage['transport.js'][126]++;
  self.writeVolatile(packet);
}));
  _$jscoverage['transport.js'][129]++;
  this.bound = {end: this.onSocketEnd.bind(this), close: this.onSocketClose.bind(this), error: this.onSocketError.bind(this), drain: this.onSocketDrain.bind(this)};
  _$jscoverage['transport.js'][136]++;
  this.socket.on("end", this.bound.end);
  _$jscoverage['transport.js'][137]++;
  this.socket.on("close", this.bound.close);
  _$jscoverage['transport.js'][138]++;
  this.socket.on("error", this.bound.error);
  _$jscoverage['transport.js'][139]++;
  this.socket.on("drain", this.bound.drain);
});
_$jscoverage['transport.js'][148]++;
Transport.prototype.clearHandlers = (function () {
  _$jscoverage['transport.js'][149]++;
  this.store.unsubscribe("disconnect-force:" + this.id);
  _$jscoverage['transport.js'][150]++;
  this.store.unsubscribe("heartbeat-clear:" + this.id);
  _$jscoverage['transport.js'][151]++;
  this.store.unsubscribe("volatile:" + this.id);
  _$jscoverage['transport.js'][153]++;
  this.socket.removeListener("end", this.bound.end);
  _$jscoverage['transport.js'][154]++;
  this.socket.removeListener("close", this.bound.close);
  _$jscoverage['transport.js'][155]++;
  this.socket.removeListener("error", this.bound.error);
  _$jscoverage['transport.js'][156]++;
  this.socket.removeListener("drain", this.bound.drain);
});
_$jscoverage['transport.js'][165]++;
Transport.prototype.onSocketEnd = (function () {
  _$jscoverage['transport.js'][169]++;
  this.end(false, "socket end");
});
_$jscoverage['transport.js'][178]++;
Transport.prototype.onSocketClose = (function (error) {
  _$jscoverage['transport.js'][179]++;
  this.end(false, error? "socket error": "socket close");
});
_$jscoverage['transport.js'][188]++;
Transport.prototype.onSocketError = (function (err) {
  _$jscoverage['transport.js'][189]++;
  if (this.open) {
    _$jscoverage['transport.js'][190]++;
    this.socket.destroy();
    _$jscoverage['transport.js'][191]++;
    this.onClose();
  }
  _$jscoverage['transport.js'][194]++;
  this.log.info("socket error " + err.stack);
});
_$jscoverage['transport.js'][203]++;
Transport.prototype.onSocketDrain = (function () {
  _$jscoverage['transport.js'][204]++;
  this.drained = true;
});
_$jscoverage['transport.js'][213]++;
Transport.prototype.onForcedDisconnect = (function () {
  _$jscoverage['transport.js'][214]++;
  if (! this.disconnected) {
    _$jscoverage['transport.js'][215]++;
    this.log.info("transport end by forced client disconnection");
    _$jscoverage['transport.js'][216]++;
    if (this.open) {
      _$jscoverage['transport.js'][217]++;
      this.packet({type: "disconnect"});
    }
    _$jscoverage['transport.js'][219]++;
    this.end(true);
  }
});
_$jscoverage['transport.js'][227]++;
Transport.prototype.setCloseTimeout = (function () {
  _$jscoverage['transport.js'][228]++;
  if (! this.closeTimeout) {
    _$jscoverage['transport.js'][229]++;
    var self = this;
    _$jscoverage['transport.js'][231]++;
    this.closeTimeout = setTimeout((function () {
  _$jscoverage['transport.js'][232]++;
  self.log.debug("fired close timeout for client", self.id);
  _$jscoverage['transport.js'][233]++;
  self.closeTimeout = null;
  _$jscoverage['transport.js'][234]++;
  self.end(false, "close timeout");
}), this.manager.get("close timeout") * 1000);
    _$jscoverage['transport.js'][237]++;
    this.log.debug("set close timeout for client", this.id);
  }
});
_$jscoverage['transport.js'][245]++;
Transport.prototype.clearCloseTimeout = (function () {
  _$jscoverage['transport.js'][246]++;
  if (this.closeTimeout) {
    _$jscoverage['transport.js'][247]++;
    clearTimeout(this.closeTimeout);
    _$jscoverage['transport.js'][248]++;
    this.closeTimeout = null;
    _$jscoverage['transport.js'][250]++;
    this.log.debug("cleared close timeout for client", this.id);
  }
});
_$jscoverage['transport.js'][258]++;
Transport.prototype.setHeartbeatTimeout = (function () {
  _$jscoverage['transport.js'][259]++;
  if (! this.heartbeatTimeout) {
    _$jscoverage['transport.js'][260]++;
    var self = this;
    _$jscoverage['transport.js'][262]++;
    this.heartbeatTimeout = setTimeout((function () {
  _$jscoverage['transport.js'][263]++;
  self.log.debug("fired heartbeat timeout for client", self.id);
  _$jscoverage['transport.js'][264]++;
  self.heartbeatTimeout = null;
  _$jscoverage['transport.js'][265]++;
  self.end(false, "heartbeat timeout");
}), this.manager.get("heartbeat timeout") * 1000);
    _$jscoverage['transport.js'][268]++;
    this.log.debug("set heartbeat timeout for client", this.id);
  }
});
_$jscoverage['transport.js'][278]++;
Transport.prototype.clearHeartbeatTimeout = (function () {
  _$jscoverage['transport.js'][279]++;
  if (this.heartbeatTimeout) {
    _$jscoverage['transport.js'][280]++;
    clearTimeout(this.heartbeatTimeout);
    _$jscoverage['transport.js'][281]++;
    this.heartbeatTimeout = null;
    _$jscoverage['transport.js'][282]++;
    this.log.debug("cleared heartbeat timeout for client", this.id);
  }
});
_$jscoverage['transport.js'][293]++;
Transport.prototype.setHeartbeatInterval = (function () {
  _$jscoverage['transport.js'][294]++;
  if (! this.heartbeatTimeout) {
    _$jscoverage['transport.js'][295]++;
    var self = this;
    _$jscoverage['transport.js'][297]++;
    this.heartbeatInterval = setTimeout((function () {
  _$jscoverage['transport.js'][298]++;
  self.heartbeat();
}), this.manager.get("heartbeat interval") * 1000);
    _$jscoverage['transport.js'][301]++;
    this.log.debug("set heartbeat interval for client", this.id);
  }
});
_$jscoverage['transport.js'][311]++;
Transport.prototype.clearTimeouts = (function () {
  _$jscoverage['transport.js'][312]++;
  this.clearCloseTimeout();
  _$jscoverage['transport.js'][313]++;
  this.clearHeartbeatTimeout();
  _$jscoverage['transport.js'][314]++;
  this.clearHeartbeatInterval();
});
_$jscoverage['transport.js'][323]++;
Transport.prototype.heartbeat = (function () {
  _$jscoverage['transport.js'][324]++;
  if (this.open) {
    _$jscoverage['transport.js'][325]++;
    this.log.debug("emitting heartbeat for client", this.id);
    _$jscoverage['transport.js'][326]++;
    this.packet({type: "heartbeat"});
    _$jscoverage['transport.js'][327]++;
    this.setHeartbeatTimeout();
  }
  _$jscoverage['transport.js'][330]++;
  return this;
});
_$jscoverage['transport.js'][340]++;
Transport.prototype.onMessage = (function (packet) {
  _$jscoverage['transport.js'][341]++;
  if ("heartbeat" == packet.type) {
    _$jscoverage['transport.js'][342]++;
    this.log.debug("got heartbeat packet");
    _$jscoverage['transport.js'][343]++;
    this.store.heartbeat(this.id);
  }
  else {
    _$jscoverage['transport.js'][344]++;
    if ("disconnect" == packet.type && packet.endpoint == "") {
      _$jscoverage['transport.js'][345]++;
      this.log.debug("got disconnection packet");
      _$jscoverage['transport.js'][346]++;
      this.store.disconnect(this.id, true);
    }
    else {
      _$jscoverage['transport.js'][348]++;
      this.log.debug("got packet");
      _$jscoverage['transport.js'][350]++;
      if (packet.id && packet.ack != "data") {
        _$jscoverage['transport.js'][351]++;
        this.log.debug("acknowledging packet automatically");
        _$jscoverage['transport.js'][352]++;
        this.store.client(this.id).publish(parser.encodePacket({type: "ack", ackId: packet.id, endpoint: packet.endpoint || ""}));
      }
      _$jscoverage['transport.js'][359]++;
      this.store.message(this.id, packet);
    }
  }
});
_$jscoverage['transport.js'][369]++;
Transport.prototype.clearHeartbeatInterval = (function () {
  _$jscoverage['transport.js'][370]++;
  if (this.heartbeatInterval) {
    _$jscoverage['transport.js'][371]++;
    clearTimeout(this.heartbeatInterval);
    _$jscoverage['transport.js'][372]++;
    this.heartbeatInterval = null;
    _$jscoverage['transport.js'][373]++;
    this.log.debug("cleared heartbeat interval for client", this.id);
  }
});
_$jscoverage['transport.js'][383]++;
Transport.prototype.disconnect = (function (reason) {
  _$jscoverage['transport.js'][384]++;
  this.packet({type: "disconnect"});
  _$jscoverage['transport.js'][385]++;
  this.end(false, reason);
  _$jscoverage['transport.js'][387]++;
  return this;
});
_$jscoverage['transport.js'][396]++;
Transport.prototype.close = (function () {
  _$jscoverage['transport.js'][397]++;
  if (this.open) {
    _$jscoverage['transport.js'][398]++;
    this.doClose();
    _$jscoverage['transport.js'][399]++;
    this.onClose();
  }
});
_$jscoverage['transport.js'][409]++;
Transport.prototype.onClose = (function () {
  _$jscoverage['transport.js'][410]++;
  if (this.open) {
    _$jscoverage['transport.js'][411]++;
    this.setCloseTimeout();
    _$jscoverage['transport.js'][412]++;
    this.unsubscribe();
    _$jscoverage['transport.js'][413]++;
    this.open = false;
  }
});
_$jscoverage['transport.js'][423]++;
Transport.prototype.end = (function (forced, reason) {
  _$jscoverage['transport.js'][424]++;
  if (! this.disconnected) {
    _$jscoverage['transport.js'][425]++;
    this.log.info("ending socket");
    _$jscoverage['transport.js'][426]++;
    this.close();
    _$jscoverage['transport.js'][427]++;
    this.clearTimeouts();
    _$jscoverage['transport.js'][429]++;
    if (! forced) {
      _$jscoverage['transport.js'][430]++;
      this.store.disconnect(this.id, false, reason);
    }
    _$jscoverage['transport.js'][432]++;
    this.disconnected = true;
  }
});
_$jscoverage['transport.js'][442]++;
Transport.prototype.resume = (function () {
  _$jscoverage['transport.js'][443]++;
  if (! this.disconnected) {
    _$jscoverage['transport.js'][444]++;
    this.paused = false;
    _$jscoverage['transport.js'][445]++;
    this.setHeartbeatInterval();
    _$jscoverage['transport.js'][446]++;
    this.subscribe();
  }
  _$jscoverage['transport.js'][449]++;
  return this;
});
_$jscoverage['transport.js'][458]++;
Transport.prototype.pause = (function () {
  _$jscoverage['transport.js'][459]++;
  this.paused = true;
  _$jscoverage['transport.js'][460]++;
  return this;
});
_$jscoverage['transport.js'][471]++;
Transport.prototype.error = (function (reason, advice) {
  _$jscoverage['transport.js'][472]++;
  this.packet({type: "error", reason: reason, advice: advice});
  _$jscoverage['transport.js'][478]++;
  this.log.warn(reason, advice? ("client should " + advice): "");
  _$jscoverage['transport.js'][479]++;
  this.end(false, "error");
});
_$jscoverage['transport.js'][488]++;
Transport.prototype.packet = (function (obj) {
  _$jscoverage['transport.js'][489]++;
  return this.write(parser.encodePacket(obj));
});
_$jscoverage['transport.js'][498]++;
Transport.prototype.subscribe = (function () {
  _$jscoverage['transport.js'][499]++;
  if (! this.subscribed) {
    _$jscoverage['transport.js'][500]++;
    this.log.debug("subscribing", this.id);
    _$jscoverage['transport.js'][502]++;
    var self = this;
    _$jscoverage['transport.js'][505]++;
    this.store.client(this.id).consume((function (payload, packet) {
  _$jscoverage['transport.js'][506]++;
  if (payload) {
    _$jscoverage['transport.js'][507]++;
    self.payload(payload);
  }
  else {
    _$jscoverage['transport.js'][509]++;
    self.write(packet);
  }
}));
    _$jscoverage['transport.js'][513]++;
    this.subscribed = true;
  }
});
_$jscoverage['transport.js'][523]++;
Transport.prototype.unsubscribe = (function () {
  _$jscoverage['transport.js'][524]++;
  if (this.subscribed) {
    _$jscoverage['transport.js'][525]++;
    this.log.info("unsubscribing", this.id);
    _$jscoverage['transport.js'][527]++;
    this.store.client(this.id).pause();
    _$jscoverage['transport.js'][528]++;
    this.subscribed = false;
  }
});
_$jscoverage['transport.js'][538]++;
Transport.prototype.writeVolatile = (function (msg) {
  _$jscoverage['transport.js'][539]++;
  if (this.open) {
    _$jscoverage['transport.js'][540]++;
    if (this.drained) {
      _$jscoverage['transport.js'][541]++;
      this.write(msg);
    }
    else {
      _$jscoverage['transport.js'][543]++;
      this.log.debug("ignoring volatile packet, buffer not drained");
    }
  }
  else {
    _$jscoverage['transport.js'][546]++;
    this.log.debug("ignoring volatile packet, transport not open");
  }
});
_$jscoverage['transport.js'].source = ["","/*!"," * socket.io-node"," * Copyright(c) 2011 LearnBoost &lt;dev@learnboost.com&gt;"," * MIT Licensed"," */","","/**"," * Module dependencies."," */","","var parser = require('./parser');","","/**"," * Expose the constructor."," */","","exports = module.exports = Transport;","","/**"," * Transport constructor."," *"," * @api public"," */","","function Transport (mng, data) {","  this.manager = mng;","  this.id = data.id;","  this.paused = true;","  this.disconnected = false;","  this.drained = true;","};","","/**"," * Sets the corresponding request object."," */","","Transport.prototype.__defineSetter__('request', function (req) {","  this.log.debug('setting request', req.method, req.url);","  this.handleRequest(req);","});","","/**"," * Access the logger."," *"," * @api public"," */","","Transport.prototype.__defineGetter__('log', function () {","  return this.manager.log;","});","","/**"," * Access the store."," *"," * @api public"," */","","Transport.prototype.__defineGetter__('store', function () {","  return this.manager.store;","});","","/**"," * Handles a request when it's set."," *"," * @api private"," */","","Transport.prototype.handleRequest = function (req) {","  this.req = req;","","  if (req.method == 'GET') {","    this.socket = req.socket;","    this.open = true;","    this.drained = true;","","    this.log.debug('publishing that', this.id, 'connected');","","    var self = this;","","    this.store.publish('open:' + this.id, function () {","      self.store.once('open:' + self.id, function () {","        self.log.info('request for existing session connection change');","        self.close();","        self.clearTimeouts();","        self.clearHandlers();","      });","","      if (!self.paused) {","        self.subscribe();","      }","    });","","    this.setHandlers();","    this.onSocketConnect();","  }","};","","/**"," * Called when a connection is first set."," *"," * @api private"," */","","Transport.prototype.onSocketConnect = function () { };","","/**"," * Sets transport handlers"," *"," * @api private"," */","","Transport.prototype.setHandlers = function () {","  var self = this;","","  this.store.once('disconnect-force:' + this.id, function () {","    self.onForcedDisconnect();","  });","","  this.store.on('heartbeat-clear:' + this.id, function () {","    self.clearHeartbeatTimeout();","    self.setHeartbeatInterval();","  });","","  this.store.on('volatile:' + this.id, function (packet) {","    self.writeVolatile(packet);","  });","","  this.bound = {","      end: this.onSocketEnd.bind(this)","    , close: this.onSocketClose.bind(this)","    , error: this.onSocketError.bind(this)","    , drain: this.onSocketDrain.bind(this)","  };","","  this.socket.on('end', this.bound.end);","  this.socket.on('close', this.bound.close);","  this.socket.on('error', this.bound.error);","  this.socket.on('drain', this.bound.drain);","};","","/**"," * Removes transport handlers"," *"," * @api private"," */","","Transport.prototype.clearHandlers = function () {","  this.store.unsubscribe('disconnect-force:' + this.id);","  this.store.unsubscribe('heartbeat-clear:' + this.id);","  this.store.unsubscribe('volatile:' + this.id);","","  this.socket.removeListener('end', this.bound.end);","  this.socket.removeListener('close', this.bound.close);","  this.socket.removeListener('error', this.bound.error);","  this.socket.removeListener('drain', this.bound.drain);","};","","/**"," * Called when the connection dies"," *"," * @api private"," */","","Transport.prototype.onSocketEnd = function () {","  // we check that the socket wasn't swapped","  // we don't want to sever a connection that's not active, since we don't kill","  // inactive sockets that the browser might reuse for other purposes","  this.end(false, 'socket end');","};","","/**"," * Called when the connection dies"," *"," * @api private"," */","","Transport.prototype.onSocketClose = function (error) {","  this.end(false, error ? 'socket error' : 'socket close');","};","","/**"," * Called when the connection has an error."," *"," * @api private"," */","","Transport.prototype.onSocketError = function (err) {","  if (this.open) {","    this.socket.destroy();","    this.onClose();","  }","","  this.log.info('socket error '  + err.stack);","};","","/**"," * Called when the connection is drained."," *"," * @api private"," */","","Transport.prototype.onSocketDrain = function () {","  this.drained = true;","};","","/**"," * Called upon a forced disconnection."," *"," * @api private"," */","","Transport.prototype.onForcedDisconnect = function () {","  if (!this.disconnected) {","    this.log.info('transport end by forced client disconnection');","    if (this.open) {","      this.packet({ type: 'disconnect' });","    }","    this.end(true);","  }","};","","/**"," * Sets the close timeout."," */","","Transport.prototype.setCloseTimeout = function () {","  if (!this.closeTimeout) {","    var self = this;","","    this.closeTimeout = setTimeout(function () {","      self.log.debug('fired close timeout for client', self.id);","      self.closeTimeout = null;","      self.end(false, 'close timeout');","    }, this.manager.get('close timeout') * 1000);","","    this.log.debug('set close timeout for client', this.id);","  }","};","","/**"," * Clears the close timeout."," */","","Transport.prototype.clearCloseTimeout = function () {","  if (this.closeTimeout) {","    clearTimeout(this.closeTimeout);","    this.closeTimeout = null;","","    this.log.debug('cleared close timeout for client', this.id);","  }","};","","/**"," * Sets the heartbeat timeout"," */","","Transport.prototype.setHeartbeatTimeout = function () {","  if (!this.heartbeatTimeout) {","    var self = this;","","    this.heartbeatTimeout = setTimeout(function () {","      self.log.debug('fired heartbeat timeout for client', self.id);","      self.heartbeatTimeout = null;","      self.end(false, 'heartbeat timeout');","    }, this.manager.get('heartbeat timeout') * 1000);","","    this.log.debug('set heartbeat timeout for client', this.id);","  }","};","","/**"," * Clears the heartbeat timeout"," *"," * @param text"," */","","Transport.prototype.clearHeartbeatTimeout = function () {","  if (this.heartbeatTimeout) {","    clearTimeout(this.heartbeatTimeout);","    this.heartbeatTimeout = null;","    this.log.debug('cleared heartbeat timeout for client', this.id);","  }","};","","/**"," * Sets the heartbeat interval. To be called when a connection opens and when"," * a heartbeat is received."," *"," * @api private"," */","","Transport.prototype.setHeartbeatInterval = function () {","  if (!this.heartbeatTimeout) {","    var self = this;","","    this.heartbeatInterval = setTimeout(function () {","      self.heartbeat();","    }, this.manager.get('heartbeat interval') * 1000);","","    this.log.debug('set heartbeat interval for client', this.id);","  }","};","","/**"," * Clears all timeouts."," *"," * @api private"," */","","Transport.prototype.clearTimeouts = function () {","  this.clearCloseTimeout();","  this.clearHeartbeatTimeout();","  this.clearHeartbeatInterval();","};","","/**"," * Sends a heartbeat"," *"," * @api private"," */","","Transport.prototype.heartbeat = function () {","  if (this.open) {","    this.log.debug('emitting heartbeat for client', this.id);","    this.packet({ type: 'heartbeat' });","    this.setHeartbeatTimeout();","  }","","  return this;","};","","/**"," * Handles a message."," *"," * @param {Object} packet object"," * @api private"," */","","Transport.prototype.onMessage = function (packet) {","  if ('heartbeat' == packet.type) {","    this.log.debug('got heartbeat packet');","    this.store.heartbeat(this.id);","  } else if ('disconnect' == packet.type &amp;&amp; packet.endpoint == '') {","    this.log.debug('got disconnection packet');","    this.store.disconnect(this.id, true);","  } else {","    this.log.debug('got packet');","","    if (packet.id &amp;&amp; packet.ack != 'data') {","      this.log.debug('acknowledging packet automatically');","      this.store.client(this.id).publish(parser.encodePacket({","          type: 'ack'","        , ackId: packet.id","        , endpoint: packet.endpoint || ''","      }));","    }","","    this.store.message(this.id, packet);","  }","};","","/**"," * Clears the heartbeat interval"," *"," * @api private"," */","","Transport.prototype.clearHeartbeatInterval = function () {","  if (this.heartbeatInterval) {","    clearTimeout(this.heartbeatInterval);","    this.heartbeatInterval = null;","    this.log.debug('cleared heartbeat interval for client', this.id);","  }","};","","/**"," * Finishes the connection and makes sure client doesn't reopen"," *"," * @api private"," */","","Transport.prototype.disconnect = function (reason) {","  this.packet({ type: 'disconnect' });","  this.end(false, reason);","","  return this;","};","","/**"," * Closes the connection."," *"," * @api private"," */","","Transport.prototype.close = function () {","  if (this.open) {","    this.doClose();","    this.onClose();","  }","};","","/**"," * Called upon a connection close."," *"," * @api private"," */","","Transport.prototype.onClose = function () {","  if (this.open) {","    this.setCloseTimeout();","    this.unsubscribe();","    this.open = false;","  }","};","","/**"," * Cleans up the connection, considers the client disconnected."," *"," * @api private"," */","","Transport.prototype.end = function (forced, reason) {","  if (!this.disconnected) {","    this.log.info('ending socket');","    this.close();","    this.clearTimeouts();","","    if (!forced)","      this.store.disconnect(this.id, false, reason);","","    this.disconnected = true;","  }","};","","/**"," * Signals that the transport can start flushing buffers."," *"," * @api public"," */","","Transport.prototype.resume = function () {","  if (!this.disconnected) {","    this.paused = false;","    this.setHeartbeatInterval();","    this.subscribe();","  }","","  return this;","};","","/**"," * Signals that the transport should pause and buffer data."," *"," * @api public"," */","","Transport.prototype.pause = function () {","  this.paused = true;","  return this;","};","","/**"," * Writes an error packet with the specified reason and advice."," *"," * @param {Number} advice"," * @param {Number} reason"," * @api public"," */","","Transport.prototype.error = function (reason, advice) {","  this.packet({","      type: 'error'","    , reason: reason","    , advice: advice","  });","","  this.log.warn(reason, advice ? ('client should ' + advice) : '');","  this.end(false, 'error');","};","","/**"," * Write a packet."," *"," * @api public"," */","","Transport.prototype.packet = function (obj) {","  return this.write(parser.encodePacket(obj));","};","","/**"," * Subscribe client."," *"," * @api private"," */","","Transport.prototype.subscribe = function () {","  if (!this.subscribed) {","    this.log.debug('subscribing', this.id);","","    var self = this;","","    // subscribe to buffered + normal messages","    this.store.client(this.id).consume(function (payload, packet) {","      if (payload) {","        self.payload(payload);","      } else {","        self.write(packet);","      }","    });","","    this.subscribed = true;","  }","};","","/**"," * Unsubscribe client."," *"," * @api private"," */","","Transport.prototype.unsubscribe = function () {","  if (this.subscribed) {","    this.log.info('unsubscribing', this.id);","","    this.store.client(this.id).pause();","    this.subscribed = false;","  }","};","","/**"," * Writes a volatile message."," *"," * @api private"," */","","Transport.prototype.writeVolatile = function (msg) {","  if (this.open) {","    if (this.drained) {","      this.write(msg);","    } else {","      this.log.debug('ignoring volatile packet, buffer not drained');","    }","  } else {","    this.log.debug('ignoring volatile packet, transport not open');","  }","};"];
