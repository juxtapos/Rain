/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['manager.js']) {
  _$jscoverage['manager.js'] = [];
  _$jscoverage['manager.js'][12] = 0;
  _$jscoverage['manager.js'][29] = 0;
  _$jscoverage['manager.js'][35] = 0;
  _$jscoverage['manager.js'][47] = 0;
  _$jscoverage['manager.js'][58] = 0;
  _$jscoverage['manager.js'][59] = 0;
  _$jscoverage['manager.js'][60] = 0;
  _$jscoverage['manager.js'][61] = 0;
  _$jscoverage['manager.js'][62] = 0;
  _$jscoverage['manager.js'][84] = 0;
  _$jscoverage['manager.js'][85] = 0;
  _$jscoverage['manager.js'][87] = 0;
  _$jscoverage['manager.js'][89] = 0;
  _$jscoverage['manager.js'][90] = 0;
  _$jscoverage['manager.js'][93] = 0;
  _$jscoverage['manager.js'][94] = 0;
  _$jscoverage['manager.js'][97] = 0;
  _$jscoverage['manager.js'][98] = 0;
  _$jscoverage['manager.js'][106] = 0;
  _$jscoverage['manager.js'][107] = 0;
  _$jscoverage['manager.js'][108] = 0;
  _$jscoverage['manager.js'][109] = 0;
  _$jscoverage['manager.js'][118] = 0;
  _$jscoverage['manager.js'][119] = 0;
  _$jscoverage['manager.js'][121] = 0;
  _$jscoverage['manager.js'][122] = 0;
  _$jscoverage['manager.js'][124] = 0;
  _$jscoverage['manager.js'][133] = 0;
  _$jscoverage['manager.js'][134] = 0;
  _$jscoverage['manager.js'][143] = 0;
  _$jscoverage['manager.js'][144] = 0;
  _$jscoverage['manager.js'][145] = 0;
  _$jscoverage['manager.js'][146] = 0;
  _$jscoverage['manager.js'][155] = 0;
  _$jscoverage['manager.js'][156] = 0;
  _$jscoverage['manager.js'][157] = 0;
  _$jscoverage['manager.js'][166] = 0;
  _$jscoverage['manager.js'][167] = 0;
  _$jscoverage['manager.js'][168] = 0;
  _$jscoverage['manager.js'][177] = 0;
  _$jscoverage['manager.js'][178] = 0;
  _$jscoverage['manager.js'][187] = 0;
  _$jscoverage['manager.js'][188] = 0;
  _$jscoverage['manager.js'][197] = 0;
  _$jscoverage['manager.js'][198] = 0;
  _$jscoverage['manager.js'][199] = 0;
  _$jscoverage['manager.js'][200] = 0;
  _$jscoverage['manager.js'][201] = 0;
  _$jscoverage['manager.js'][204] = 0;
  _$jscoverage['manager.js'][213] = 0;
  _$jscoverage['manager.js'][214] = 0;
  _$jscoverage['manager.js'][216] = 0;
  _$jscoverage['manager.js'][217] = 0;
  _$jscoverage['manager.js'][219] = 0;
  _$jscoverage['manager.js'][220] = 0;
  _$jscoverage['manager.js'][222] = 0;
  _$jscoverage['manager.js'][225] = 0;
  _$jscoverage['manager.js'][226] = 0;
  _$jscoverage['manager.js'][227] = 0;
  _$jscoverage['manager.js'][229] = 0;
  _$jscoverage['manager.js'][230] = 0;
  _$jscoverage['manager.js'][232] = 0;
  _$jscoverage['manager.js'][235] = 0;
  _$jscoverage['manager.js'][238] = 0;
  _$jscoverage['manager.js'][239] = 0;
  _$jscoverage['manager.js'][240] = 0;
  _$jscoverage['manager.js'][242] = 0;
  _$jscoverage['manager.js'][244] = 0;
  _$jscoverage['manager.js'][245] = 0;
  _$jscoverage['manager.js'][247] = 0;
  _$jscoverage['manager.js'][258] = 0;
  _$jscoverage['manager.js'][259] = 0;
  _$jscoverage['manager.js'][262] = 0;
  _$jscoverage['manager.js'][263] = 0;
  _$jscoverage['manager.js'][264] = 0;
  _$jscoverage['manager.js'][265] = 0;
  _$jscoverage['manager.js'][268] = 0;
  _$jscoverage['manager.js'][271] = 0;
  _$jscoverage['manager.js'][272] = 0;
  _$jscoverage['manager.js'][281] = 0;
  _$jscoverage['manager.js'][282] = 0;
  _$jscoverage['manager.js'][283] = 0;
  _$jscoverage['manager.js'][292] = 0;
  _$jscoverage['manager.js'][293] = 0;
  _$jscoverage['manager.js'][297] = 0;
  _$jscoverage['manager.js'][298] = 0;
  _$jscoverage['manager.js'][299] = 0;
  _$jscoverage['manager.js'][300] = 0;
  _$jscoverage['manager.js'][303] = 0;
  _$jscoverage['manager.js'][304] = 0;
  _$jscoverage['manager.js'][305] = 0;
  _$jscoverage['manager.js'][306] = 0;
  _$jscoverage['manager.js'][309] = 0;
  _$jscoverage['manager.js'][310] = 0;
  _$jscoverage['manager.js'][311] = 0;
  _$jscoverage['manager.js'][313] = 0;
  _$jscoverage['manager.js'][314] = 0;
  _$jscoverage['manager.js'][315] = 0;
  _$jscoverage['manager.js'][318] = 0;
  _$jscoverage['manager.js'][319] = 0;
  _$jscoverage['manager.js'][320] = 0;
  _$jscoverage['manager.js'][321] = 0;
  _$jscoverage['manager.js'][322] = 0;
  _$jscoverage['manager.js'][325] = 0;
  _$jscoverage['manager.js'][326] = 0;
  _$jscoverage['manager.js'][328] = 0;
  _$jscoverage['manager.js'][330] = 0;
  _$jscoverage['manager.js'][331] = 0;
  _$jscoverage['manager.js'][334] = 0;
  _$jscoverage['manager.js'][335] = 0;
  _$jscoverage['manager.js'][340] = 0;
  _$jscoverage['manager.js'][341] = 0;
  _$jscoverage['manager.js'][354] = 0;
  _$jscoverage['manager.js'][355] = 0;
  _$jscoverage['manager.js'][357] = 0;
  _$jscoverage['manager.js'][358] = 0;
  _$jscoverage['manager.js'][359] = 0;
  _$jscoverage['manager.js'][362] = 0;
  _$jscoverage['manager.js'][367] = 0;
  _$jscoverage['manager.js'][368] = 0;
  _$jscoverage['manager.js'][371] = 0;
  _$jscoverage['manager.js'][372] = 0;
  _$jscoverage['manager.js'][374] = 0;
  _$jscoverage['manager.js'][375] = 0;
  _$jscoverage['manager.js'][377] = 0;
  _$jscoverage['manager.js'][378] = 0;
  _$jscoverage['manager.js'][379] = 0;
  _$jscoverage['manager.js'][380] = 0;
  _$jscoverage['manager.js'][384] = 0;
  _$jscoverage['manager.js'][385] = 0;
  _$jscoverage['manager.js'][386] = 0;
  _$jscoverage['manager.js'][387] = 0;
  _$jscoverage['manager.js'][389] = 0;
  _$jscoverage['manager.js'][390] = 0;
  _$jscoverage['manager.js'][393] = 0;
  _$jscoverage['manager.js'][394] = 0;
  _$jscoverage['manager.js'][395] = 0;
  _$jscoverage['manager.js'][397] = 0;
  _$jscoverage['manager.js'][400] = 0;
  _$jscoverage['manager.js'][410] = 0;
  _$jscoverage['manager.js'][411] = 0;
  _$jscoverage['manager.js'][413] = 0;
  _$jscoverage['manager.js'][414] = 0;
  _$jscoverage['manager.js'][415] = 0;
  _$jscoverage['manager.js'][416] = 0;
  _$jscoverage['manager.js'][418] = 0;
  _$jscoverage['manager.js'][419] = 0;
  _$jscoverage['manager.js'][421] = 0;
  _$jscoverage['manager.js'][423] = 0;
  _$jscoverage['manager.js'][424] = 0;
  _$jscoverage['manager.js'][425] = 0;
  _$jscoverage['manager.js'][426] = 0;
  _$jscoverage['manager.js'][428] = 0;
  _$jscoverage['manager.js'][429] = 0;
  _$jscoverage['manager.js'][430] = 0;
  _$jscoverage['manager.js'][433] = 0;
  _$jscoverage['manager.js'][434] = 0;
  _$jscoverage['manager.js'][436] = 0;
  _$jscoverage['manager.js'][438] = 0;
  _$jscoverage['manager.js'][439] = 0;
  _$jscoverage['manager.js'][440] = 0;
  _$jscoverage['manager.js'][442] = 0;
  _$jscoverage['manager.js'][449] = 0;
  _$jscoverage['manager.js'][450] = 0;
  _$jscoverage['manager.js'][451] = 0;
  _$jscoverage['manager.js'][453] = 0;
  _$jscoverage['manager.js'][456] = 0;
  _$jscoverage['manager.js'][457] = 0;
  _$jscoverage['manager.js'][460] = 0;
  _$jscoverage['manager.js'][471] = 0;
  _$jscoverage['manager.js'][472] = 0;
  _$jscoverage['manager.js'][475] = 0;
  _$jscoverage['manager.js'][477] = 0;
  _$jscoverage['manager.js'][478] = 0;
  _$jscoverage['manager.js'][481] = 0;
  _$jscoverage['manager.js'][482] = 0;
  _$jscoverage['manager.js'][483] = 0;
  _$jscoverage['manager.js'][485] = 0;
  _$jscoverage['manager.js'][486] = 0;
  _$jscoverage['manager.js'][492] = 0;
  _$jscoverage['manager.js'][501] = 0;
  _$jscoverage['manager.js'][502] = 0;
  _$jscoverage['manager.js'][512] = 0;
  _$jscoverage['manager.js'][513] = 0;
  _$jscoverage['manager.js'][514] = 0;
  _$jscoverage['manager.js'][516] = 0;
  _$jscoverage['manager.js'][517] = 0;
  _$jscoverage['manager.js'][518] = 0;
  _$jscoverage['manager.js'][521] = 0;
  _$jscoverage['manager.js'][522] = 0;
  _$jscoverage['manager.js'][525] = 0;
  _$jscoverage['manager.js'][534] = 0;
  _$jscoverage['manager.js'][535] = 0;
  _$jscoverage['manager.js'][538] = 0;
  _$jscoverage['manager.js'][539] = 0;
  _$jscoverage['manager.js'][541] = 0;
  _$jscoverage['manager.js'][542] = 0;
  _$jscoverage['manager.js'][543] = 0;
  _$jscoverage['manager.js'][548] = 0;
  _$jscoverage['manager.js'][558] = 0;
  _$jscoverage['manager.js'][560] = 0;
  _$jscoverage['manager.js'][561] = 0;
  _$jscoverage['manager.js'][563] = 0;
  _$jscoverage['manager.js'][564] = 0;
  _$jscoverage['manager.js'][569] = 0;
  _$jscoverage['manager.js'][576] = 0;
  _$jscoverage['manager.js'][577] = 0;
  _$jscoverage['manager.js'][578] = 0;
  _$jscoverage['manager.js'][579] = 0;
  _$jscoverage['manager.js'][580] = 0;
  _$jscoverage['manager.js'][582] = 0;
  _$jscoverage['manager.js'][585] = 0;
  _$jscoverage['manager.js'][592] = 0;
  _$jscoverage['manager.js'][593] = 0;
  _$jscoverage['manager.js'][594] = 0;
  _$jscoverage['manager.js'][597] = 0;
}
_$jscoverage['manager.js'][12]++;
var http = require("http"), https = require("https"), fs = require("fs"), url = require("url"), util = require("./util"), store = require("./store"), client = require("socket.io-client"), transports = require("./transports"), Logger = require("./logger"), Socket = require("./socket"), MemoryStore = require("./stores/memory"), SocketNamespace = require("./namespace");
_$jscoverage['manager.js'][29]++;
exports = module.exports = Manager;
_$jscoverage['manager.js'][35]++;
var defaultTransports = exports.defaultTransports = ["websocket", "flashsocket", "htmlfile", "xhr-polling", "jsonp-polling"];
_$jscoverage['manager.js'][47]++;
var parent = module.parent.exports, protocol = parent.protocol;
_$jscoverage['manager.js'][58]++;
function Manager(server) {
  _$jscoverage['manager.js'][59]++;
  this.server = server;
  _$jscoverage['manager.js'][60]++;
  this.namespaces = {};
  _$jscoverage['manager.js'][61]++;
  this.sockets = this.of("");
  _$jscoverage['manager.js'][62]++;
  this.settings = {origins: "*:*", log: true, store: new MemoryStore(), logger: new Logger(), heartbeats: true, resource: "/socket.io", transports: defaultTransports, authorization: false, "log level": 3, "close timeout": 25, "heartbeat timeout": 15, "heartbeat interval": 20, "polling duration": 20, "flash policy server": true, "destroy upgrade": true, "browser client": true, "browser client minification": false, "browser client etag": false};
  _$jscoverage['manager.js'][84]++;
  this.oldListeners = server.listeners("request");
  _$jscoverage['manager.js'][85]++;
  server.removeAllListeners("request");
  _$jscoverage['manager.js'][87]++;
  var self = this;
  _$jscoverage['manager.js'][89]++;
  server.on("request", (function (req, res) {
  _$jscoverage['manager.js'][90]++;
  self.handleRequest(req, res);
}));
  _$jscoverage['manager.js'][93]++;
  server.on("upgrade", (function (req, socket, head) {
  _$jscoverage['manager.js'][94]++;
  self.handleUpgrade(req, socket, head);
}));
  _$jscoverage['manager.js'][97]++;
  this.log.info("socket.io started");
}
_$jscoverage['manager.js'][98]++;
;
_$jscoverage['manager.js'][106]++;
Manager.prototype.__defineGetter__("store", (function () {
  _$jscoverage['manager.js'][107]++;
  var store = this.get("store");
  _$jscoverage['manager.js'][108]++;
  store.manager = this;
  _$jscoverage['manager.js'][109]++;
  return store;
}));
_$jscoverage['manager.js'][118]++;
Manager.prototype.__defineGetter__("log", (function () {
  _$jscoverage['manager.js'][119]++;
  if (this.disabled("log")) {
    _$jscoverage['manager.js'][119]++;
    return;
  }
  _$jscoverage['manager.js'][121]++;
  var logger = this.get("logger");
  _$jscoverage['manager.js'][122]++;
  logger.level = this.get("log level");
  _$jscoverage['manager.js'][124]++;
  return logger;
}));
_$jscoverage['manager.js'][133]++;
Manager.prototype.get = (function (key) {
  _$jscoverage['manager.js'][134]++;
  return this.settings[key];
});
_$jscoverage['manager.js'][143]++;
Manager.prototype.set = (function (key, value) {
  _$jscoverage['manager.js'][144]++;
  if (arguments.length == 1) {
    _$jscoverage['manager.js'][144]++;
    return this.get(key);
  }
  _$jscoverage['manager.js'][145]++;
  this.settings[key] = value;
  _$jscoverage['manager.js'][146]++;
  return this;
});
_$jscoverage['manager.js'][155]++;
Manager.prototype.enable = (function (key) {
  _$jscoverage['manager.js'][156]++;
  this.settings[key] = true;
  _$jscoverage['manager.js'][157]++;
  return this;
});
_$jscoverage['manager.js'][166]++;
Manager.prototype.disable = (function (key) {
  _$jscoverage['manager.js'][167]++;
  this.settings[key] = false;
  _$jscoverage['manager.js'][168]++;
  return this;
});
_$jscoverage['manager.js'][177]++;
Manager.prototype.enabled = (function (key) {
  _$jscoverage['manager.js'][178]++;
  return ! ! this.settings[key];
});
_$jscoverage['manager.js'][187]++;
Manager.prototype.disabled = (function (key) {
  _$jscoverage['manager.js'][188]++;
  return ! this.settings[key];
});
_$jscoverage['manager.js'][197]++;
Manager.prototype.configure = (function (env, fn) {
  _$jscoverage['manager.js'][198]++;
  if ("function" == typeof env) {
    _$jscoverage['manager.js'][199]++;
    env.call(this);
  }
  else {
    _$jscoverage['manager.js'][200]++;
    if (env == process.env.NODE_ENV) {
      _$jscoverage['manager.js'][201]++;
      fn.call(this);
    }
  }
  _$jscoverage['manager.js'][204]++;
  return this;
});
_$jscoverage['manager.js'][213]++;
Manager.prototype.handleRequest = (function (req, res) {
  _$jscoverage['manager.js'][214]++;
  var data = this.checkRequest(req);
  _$jscoverage['manager.js'][216]++;
  if (! data) {
    _$jscoverage['manager.js'][217]++;
    this.log.debug("ignoring request outside socket.io namespace");
    _$jscoverage['manager.js'][219]++;
    for (var i = 0, l = this.oldListeners.length; i < l; i++) {
      _$jscoverage['manager.js'][220]++;
      this.oldListeners[i].call(this.server, req, res);
}
    _$jscoverage['manager.js'][222]++;
    return;
  }
  _$jscoverage['manager.js'][225]++;
  if (! data.transport && ! data.protocol) {
    _$jscoverage['manager.js'][226]++;
    if (data.path == "/socket.io.js" && this.enabled("browser client")) {
      _$jscoverage['manager.js'][227]++;
      this.handleClientRequest(req, res);
    }
    else {
      _$jscoverage['manager.js'][229]++;
      res.writeHead(200);
      _$jscoverage['manager.js'][230]++;
      res.end("Welcome to socket.io.");
      _$jscoverage['manager.js'][232]++;
      this.log.info("unhandled socket.io url");
    }
    _$jscoverage['manager.js'][235]++;
    return;
  }
  _$jscoverage['manager.js'][238]++;
  if (data.protocol != protocol) {
    _$jscoverage['manager.js'][239]++;
    res.writeHead(500);
    _$jscoverage['manager.js'][240]++;
    res.end("Protocol version not supported.");
    _$jscoverage['manager.js'][242]++;
    this.log.info("client protocol version unsupported");
  }
  else {
    _$jscoverage['manager.js'][244]++;
    if (data.id) {
      _$jscoverage['manager.js'][245]++;
      this.handleHTTPRequest(data, req, res);
    }
    else {
      _$jscoverage['manager.js'][247]++;
      this.handleHandshake(data, req, res);
    }
  }
});
_$jscoverage['manager.js'][258]++;
Manager.prototype.handleUpgrade = (function (req, socket, head) {
  _$jscoverage['manager.js'][259]++;
  var data = this.checkRequest(req), self = this;
  _$jscoverage['manager.js'][262]++;
  if (! data) {
    _$jscoverage['manager.js'][263]++;
    if (this.enabled("destroy upgrade")) {
      _$jscoverage['manager.js'][264]++;
      socket.end();
      _$jscoverage['manager.js'][265]++;
      this.log.debug("destroying non-socket.io upgrade");
    }
    _$jscoverage['manager.js'][268]++;
    return;
  }
  _$jscoverage['manager.js'][271]++;
  req.head = head;
  _$jscoverage['manager.js'][272]++;
  this.handleClient(data, req);
});
_$jscoverage['manager.js'][281]++;
Manager.prototype.handleHTTPRequest = (function (data, req, res) {
  _$jscoverage['manager.js'][282]++;
  req.res = res;
  _$jscoverage['manager.js'][283]++;
  this.handleClient(data, req);
});
_$jscoverage['manager.js'][292]++;
Manager.prototype.handleClient = (function (data, req) {
  _$jscoverage['manager.js'][293]++;
  var socket = req.socket, newTransport = false, self = this;
  _$jscoverage['manager.js'][297]++;
  if (undefined != data.query.disconnect) {
    _$jscoverage['manager.js'][298]++;
    self.log.debug("handling disconnection url");
    _$jscoverage['manager.js'][299]++;
    self.store.disconnect(data.id, true);
    _$jscoverage['manager.js'][300]++;
    return;
  }
  _$jscoverage['manager.js'][303]++;
  if (! ~ this.get("transports").indexOf(data.transport)) {
    _$jscoverage['manager.js'][304]++;
    this.log.warn("unknown transport: \"" + data.transport + "\"");
    _$jscoverage['manager.js'][305]++;
    req.connection.end();
    _$jscoverage['manager.js'][306]++;
    return;
  }
  _$jscoverage['manager.js'][309]++;
  var transport = new transports[data.transport](this, data);
  _$jscoverage['manager.js'][310]++;
  transport.pause();
  _$jscoverage['manager.js'][311]++;
  transport.request = req;
  _$jscoverage['manager.js'][313]++;
  if (! transport.open) {
    _$jscoverage['manager.js'][314]++;
    this.log.debug("transport not writeable, not subscribing");
    _$jscoverage['manager.js'][315]++;
    return;
  }
  _$jscoverage['manager.js'][318]++;
  this.store.isHandshaken(data.id, (function (err, handshaken) {
  _$jscoverage['manager.js'][319]++;
  if (err || ! handshaken) {
    _$jscoverage['manager.js'][320]++;
    if (err) {
      _$jscoverage['manager.js'][320]++;
      console.error(err);
    }
    _$jscoverage['manager.js'][321]++;
    transport.error("client not handshaken");
    _$jscoverage['manager.js'][322]++;
    return;
  }
  _$jscoverage['manager.js'][325]++;
  self.store.client(data.id).count((function (err, count) {
  _$jscoverage['manager.js'][326]++;
  transport.resume();
  _$jscoverage['manager.js'][328]++;
  if (count == 1) {
    _$jscoverage['manager.js'][330]++;
    for (var i in self.namespaces) {
      _$jscoverage['manager.js'][331]++;
      var socket = self.namespaces[i].socket(data.id, true);
      _$jscoverage['manager.js'][334]++;
      if (i === "") {
        _$jscoverage['manager.js'][335]++;
        self.namespaces[i].handlePacket(data.id, {type: "connect"});
      }
}
    _$jscoverage['manager.js'][340]++;
    self.store.on("message:" + data.id, (function (packet) {
  _$jscoverage['manager.js'][341]++;
  self.handlePacket(data.id, packet);
}));
  }
}));
}));
});
_$jscoverage['manager.js'][354]++;
Manager.prototype.handleClientRequest = (function (req, res) {
  _$jscoverage['manager.js'][355]++;
  var self = this;
  _$jscoverage['manager.js'][357]++;
  function serve() {
    _$jscoverage['manager.js'][358]++;
    if (! self.clientLength) {
      _$jscoverage['manager.js'][359]++;
      self.clientLength = Buffer.byteLength(self.client);
    }
    _$jscoverage['manager.js'][362]++;
    var headers = {"Content-Type": "application/javascript", "Content-Length": self.clientLength};
    _$jscoverage['manager.js'][367]++;
    if (self.enabled("browser client etag") && self.clientEtag) {
      _$jscoverage['manager.js'][368]++;
      headers.ETag = self.clientEtag;
    }
    _$jscoverage['manager.js'][371]++;
    res.writeHead(200, headers);
    _$jscoverage['manager.js'][372]++;
    res.end(self.client);
    _$jscoverage['manager.js'][374]++;
    self.log.debug("served client");
}
  _$jscoverage['manager.js'][375]++;
  ;
  _$jscoverage['manager.js'][377]++;
  if (this.get("browser client handler")) {
    _$jscoverage['manager.js'][378]++;
    this.get("browser client handler").call(this, req, res);
  }
  else {
    _$jscoverage['manager.js'][379]++;
    if (! this.client) {
      _$jscoverage['manager.js'][380]++;
      var file = this.enabled("browser client minification")? "socket.io.min.js": "socket.io.js";
      _$jscoverage['manager.js'][384]++;
      fs.readFile(client.dist + "/" + file, (function (err, data) {
  _$jscoverage['manager.js'][385]++;
  if (err) {
    _$jscoverage['manager.js'][386]++;
    res.writeHead(500);
    _$jscoverage['manager.js'][387]++;
    res.end("Error serving socket.io client.");
    _$jscoverage['manager.js'][389]++;
    self.log.warn("Can't cache socket.io client");
    _$jscoverage['manager.js'][390]++;
    return;
  }
  _$jscoverage['manager.js'][393]++;
  self.client = data.toString();
  _$jscoverage['manager.js'][394]++;
  self.clientEtag = client.version;
  _$jscoverage['manager.js'][395]++;
  self.log.debug("caching", client.version, "client");
  _$jscoverage['manager.js'][397]++;
  serve();
}));
    }
    else {
      _$jscoverage['manager.js'][400]++;
      serve();
    }
  }
});
_$jscoverage['manager.js'][410]++;
Manager.prototype.handleHandshake = (function (data, req, res) {
  _$jscoverage['manager.js'][411]++;
  var self = this;
  _$jscoverage['manager.js'][413]++;
  function writeErr(status, message) {
    _$jscoverage['manager.js'][414]++;
    if (data.query.jsonp) {
      _$jscoverage['manager.js'][415]++;
      res.writeHead(200, {"Content-Type": "application/javascript"});
      _$jscoverage['manager.js'][416]++;
      res.end("io.j[" + data.query.jsonp + "](new Error(\"" + message + "\"));");
    }
    else {
      _$jscoverage['manager.js'][418]++;
      res.writeHead(status);
      _$jscoverage['manager.js'][419]++;
      res.end(message);
    }
}
  _$jscoverage['manager.js'][421]++;
  ;
  _$jscoverage['manager.js'][423]++;
  function error(err) {
    _$jscoverage['manager.js'][424]++;
    writeErr(500, "handshake error");
    _$jscoverage['manager.js'][425]++;
    self.log.warn("handshake error " + err);
}
  _$jscoverage['manager.js'][426]++;
  ;
  _$jscoverage['manager.js'][428]++;
  if (! this.verifyOrigin(req)) {
    _$jscoverage['manager.js'][429]++;
    writeErr(403, "handshake bad origin");
    _$jscoverage['manager.js'][430]++;
    return;
  }
  _$jscoverage['manager.js'][433]++;
  this.authorize(data, (function (err, authorized) {
  _$jscoverage['manager.js'][434]++;
  if (err) {
    _$jscoverage['manager.js'][434]++;
    return error(err);
  }
  _$jscoverage['manager.js'][436]++;
  self.log.info("handshake " + (authorized? "authorized": "unauthorized"));
  _$jscoverage['manager.js'][438]++;
  if (authorized) {
    _$jscoverage['manager.js'][439]++;
    self.store.handshake(data, (function (err, id) {
  _$jscoverage['manager.js'][440]++;
  if (err) {
    _$jscoverage['manager.js'][440]++;
    return error(err);
  }
  _$jscoverage['manager.js'][442]++;
  var hs = [id, self.get("heartbeat timeout") || "", self.get("close timeout") || "", self.transports(data).join(",")].join(":");
  _$jscoverage['manager.js'][449]++;
  if (data.query.jsonp) {
    _$jscoverage['manager.js'][450]++;
    hs = "io.j[" + data.query.jsonp + "](" + JSON.stringify(hs) + ");";
    _$jscoverage['manager.js'][451]++;
    res.writeHead(200, {"Content-Type": "application/javascript"});
  }
  else {
    _$jscoverage['manager.js'][453]++;
    res.writeHead(200);
  }
  _$jscoverage['manager.js'][456]++;
  res.end(hs);
  _$jscoverage['manager.js'][457]++;
  self.log.info("handshaken", id);
}));
  }
  else {
    _$jscoverage['manager.js'][460]++;
    writeErr(403, "handshake unauthorized");
  }
}));
});
_$jscoverage['manager.js'][471]++;
Manager.prototype.verifyOrigin = (function (request) {
  _$jscoverage['manager.js'][472]++;
  var origin = request.headers.origin, origins = this.get("origins");
  _$jscoverage['manager.js'][475]++;
  if (origin === "null") {
    _$jscoverage['manager.js'][475]++;
    origin = "*";
  }
  _$jscoverage['manager.js'][477]++;
  if (origins.indexOf("*:*") !== -1) {
    _$jscoverage['manager.js'][478]++;
    return true;
  }
  _$jscoverage['manager.js'][481]++;
  if (origin) {
    _$jscoverage['manager.js'][482]++;
    try {
      _$jscoverage['manager.js'][483]++;
      var parts = url.parse(origin);
      _$jscoverage['manager.js'][485]++;
      return;
      _$jscoverage['manager.js'][486]++;
      ~ origins.indexOf(parts.host + ":" + parts.port) || ~ origins.indexOf(parts.host + ":*") || ~ origins.indexOf("*:" + parts.port);
    }
    catch (ex) {
    }
  }
  _$jscoverage['manager.js'][492]++;
  return false;
});
_$jscoverage['manager.js'][501]++;
Manager.prototype.handlePacket = (function (sessid, packet) {
  _$jscoverage['manager.js'][502]++;
  this.of(packet.endpoint || "").handlePacket(sessid, packet);
});
_$jscoverage['manager.js'][512]++;
Manager.prototype.authorize = (function (data, fn) {
  _$jscoverage['manager.js'][513]++;
  if (this.get("authorization")) {
    _$jscoverage['manager.js'][514]++;
    var self = this;
    _$jscoverage['manager.js'][516]++;
    this.get("authorization").call(this, data, (function (err, authorized) {
  _$jscoverage['manager.js'][517]++;
  self.log.debug("client " + authorized? "authorized": "unauthorized");
  _$jscoverage['manager.js'][518]++;
  fn(err, authorized);
}));
  }
  else {
    _$jscoverage['manager.js'][521]++;
    this.log.debug("client authorized");
    _$jscoverage['manager.js'][522]++;
    fn(null, true);
  }
  _$jscoverage['manager.js'][525]++;
  return this;
});
_$jscoverage['manager.js'][534]++;
Manager.prototype.transports = (function (data) {
  _$jscoverage['manager.js'][535]++;
  var transp = this.get("transports"), ret = [];
  _$jscoverage['manager.js'][538]++;
  for (var i = 0, l = transp.length; i < l; i++) {
    _$jscoverage['manager.js'][539]++;
    var transport = transp[i];
    _$jscoverage['manager.js'][541]++;
    if (transport) {
      _$jscoverage['manager.js'][542]++;
      if (! transport.checkClient || transport.checkClient(data)) {
        _$jscoverage['manager.js'][543]++;
        ret.push(transport);
      }
    }
}
  _$jscoverage['manager.js'][548]++;
  return ret;
});
_$jscoverage['manager.js'][558]++;
var regexp = /^\/([^\/]+)\/?([^\/]+)?\/?([^\/]+)?\/?$/;
_$jscoverage['manager.js'][560]++;
Manager.prototype.checkRequest = (function (req) {
  _$jscoverage['manager.js'][561]++;
  var resource = this.get("resource");
  _$jscoverage['manager.js'][563]++;
  if (req.url.substr(0, resource.length) == resource) {
    _$jscoverage['manager.js'][564]++;
    var uri = url.parse(req.url.substr(resource.length), true), path = uri.pathname || "", pieces = path.match(regexp);
    _$jscoverage['manager.js'][569]++;
    var data = {query: uri.query || {}, headers: req.headers, request: req, path: path};
    _$jscoverage['manager.js'][576]++;
    if (pieces) {
      _$jscoverage['manager.js'][577]++;
      data.protocol = Number(pieces[1]);
      _$jscoverage['manager.js'][578]++;
      data.transport = pieces[2];
      _$jscoverage['manager.js'][579]++;
      data.id = pieces[3];
    }
    _$jscoverage['manager.js'][580]++;
    ;
    _$jscoverage['manager.js'][582]++;
    return data;
  }
  _$jscoverage['manager.js'][585]++;
  return false;
});
_$jscoverage['manager.js'][592]++;
Manager.prototype.of = (function (nsp) {
  _$jscoverage['manager.js'][593]++;
  if (this.namespaces[nsp]) {
    _$jscoverage['manager.js'][594]++;
    return this.namespaces[nsp];
  }
  _$jscoverage['manager.js'][597]++;
  return this.namespaces[nsp] = new SocketNamespace(this, nsp);
});
_$jscoverage['manager.js'].source = ["","/*!"," * socket.io-node"," * Copyright(c) 2011 LearnBoost &lt;dev@learnboost.com&gt;"," * MIT Licensed"," */","","/**"," * Module dependencies."," */","","var http = require('http')","  , https = require('https')","  , fs = require('fs')","  , url = require('url')","  , util = require('./util')","  , store = require('./store')","  , client = require('socket.io-client')","  , transports = require('./transports')","  , Logger = require('./logger')","  , Socket = require('./socket')","  , MemoryStore = require('./stores/memory')","  , SocketNamespace = require('./namespace');","","/**"," * Export the constructor."," */","","exports = module.exports = Manager;","","/**"," * Default transports."," */","","var defaultTransports = exports.defaultTransports = [","    'websocket'","  , 'flashsocket'","  , 'htmlfile'","  , 'xhr-polling'","  , 'jsonp-polling'","];","","/**"," * Inherited defaults."," */","","var parent = module.parent.exports","  , protocol = parent.protocol;","","/**"," * Manager constructor."," *"," * @param {HTTPServer} server"," * @param {Object} options, optional"," * @api public"," */","","function Manager (server) {","  this.server = server;","  this.namespaces = {};","  this.sockets = this.of('');","  this.settings = {","      origins: '*:*'","    , log: true","    , store: new MemoryStore","    , logger: new Logger","    , heartbeats: true","    , resource: '/socket.io'","    , transports: defaultTransports","    , authorization: false","    , 'log level': 3","    , 'close timeout': 25","    , 'heartbeat timeout': 15","    , 'heartbeat interval': 20","    , 'polling duration': 20","    , 'flash policy server': true","    , 'destroy upgrade': true","    , 'browser client': true","    , 'browser client minification': false","    , 'browser client etag': false","  };","","  // reset listeners","  this.oldListeners = server.listeners('request');","  server.removeAllListeners('request');","","  var self = this;","","  server.on('request', function (req, res) {","    self.handleRequest(req, res);","  });","","  server.on('upgrade', function (req, socket, head) {","    self.handleUpgrade(req, socket, head);","  });","","  this.log.info('socket.io started');","};","","/**"," * Store accessor shortcut."," *"," * @api public"," */","","Manager.prototype.__defineGetter__('store', function () {","  var store = this.get('store');","  store.manager = this;","  return store;","});","","/**"," * Logger accessor."," *"," * @api public"," */","","Manager.prototype.__defineGetter__('log', function () {","  if (this.disabled('log')) return;","","  var logger = this.get('logger');","  logger.level = this.get('log level');","","  return logger;","});","","/**"," * Get settings."," *"," * @api public"," */","","Manager.prototype.get = function (key) {","  return this.settings[key];","};","","/**"," * Set settings"," *"," * @api public"," */","","Manager.prototype.set = function (key, value) {","  if (arguments.length == 1) return this.get(key);","  this.settings[key] = value;","  return this;","};","","/**"," * Enable a setting"," *"," * @api public"," */","","Manager.prototype.enable = function (key) {","  this.settings[key] = true;","  return this;","};","","/**"," * Disable a setting"," *"," * @api public"," */","","Manager.prototype.disable = function (key) {","  this.settings[key] = false;","  return this;","};","","/**"," * Checks if a setting is enabled"," *"," * @api public"," */","","Manager.prototype.enabled = function (key) {","  return !!this.settings[key];","};","","/**"," * Checks if a setting is disabled"," *"," * @api public"," */","","Manager.prototype.disabled = function (key) {","  return !this.settings[key];","};","","/**"," * Configure callbacks."," *"," * @api public"," */","","Manager.prototype.configure = function (env, fn) {","  if ('function' == typeof env) {","    env.call(this);","  } else if (env == process.env.NODE_ENV) {","    fn.call(this);","  }","","  return this;","};","","/**"," * Handles an HTTP request."," *"," * @api private"," */","","Manager.prototype.handleRequest = function (req, res) {","  var data = this.checkRequest(req);","","  if (!data) {","    this.log.debug('ignoring request outside socket.io namespace');","","    for (var i = 0, l = this.oldListeners.length; i &lt; l; i++)","      this.oldListeners[i].call(this.server, req, res);","","    return;","  }","","  if (!data.transport &amp;&amp; !data.protocol) {","    if (data.path == '/socket.io.js' &amp;&amp; this.enabled('browser client')) {","      this.handleClientRequest(req, res);","    } else {","      res.writeHead(200);","      res.end('Welcome to socket.io.');","","      this.log.info('unhandled socket.io url');","    }","","    return;","  }","","  if (data.protocol != protocol) {","    res.writeHead(500);","    res.end('Protocol version not supported.');","","    this.log.info('client protocol version unsupported');","  } else {","    if (data.id) {","      this.handleHTTPRequest(data, req, res);","    } else {","      this.handleHandshake(data, req, res);","    }","  }","};","","/**"," * Handles an HTTP Upgrade."," *"," * @api private"," */","","Manager.prototype.handleUpgrade = function (req, socket, head) {","  var data = this.checkRequest(req)","    , self = this;","","  if (!data) {","    if (this.enabled('destroy upgrade')) {","      socket.end();","      this.log.debug('destroying non-socket.io upgrade');","    }","","    return;","  }","","  req.head = head;","  this.handleClient(data, req);","};","","/**"," * Handles a normal handshaken HTTP request (eg: long-polling)"," *"," * @api private"," */","","Manager.prototype.handleHTTPRequest = function (data, req, res) {","  req.res = res;","  this.handleClient(data, req);","};","","/**"," * Intantiantes a new client."," *"," * @api private"," */","","Manager.prototype.handleClient = function (data, req) {","  var socket = req.socket","    , newTransport = false","    , self = this;","","  if (undefined != data.query.disconnect) {","    self.log.debug('handling disconnection url');","    self.store.disconnect(data.id, true);","    return;","  }","","  if (!~this.get('transports').indexOf(data.transport)) {","    this.log.warn('unknown transport: \"' + data.transport + '\"');","    req.connection.end();","    return;","  }","","  var transport = new transports[data.transport](this, data);","  transport.pause();","  transport.request = req;","","  if (!transport.open) {","    this.log.debug('transport not writeable, not subscribing');","    return;","  }","","  this.store.isHandshaken(data.id, function (err, handshaken) {","    if (err || !handshaken) {","      if (err) console.error(err);","      transport.error('client not handshaken');","      return;","    }","","    self.store.client(data.id).count(function (err, count) {","      transport.resume();","","      if (count == 1) {","        // initialize the socket for all namespaces","        for (var i in self.namespaces) {","          var socket = self.namespaces[i].socket(data.id, true);","","          // echo back connect packet and fire connection event","          if (i === '') {","            self.namespaces[i].handlePacket(data.id, { type: 'connect' });","          }","        }","","        // handle packets for the client (all namespaces)","        self.store.on('message:' + data.id, function (packet) {","          self.handlePacket(data.id, packet);","        });","      }","    });","  });","};","","/**"," * Serves the client."," *"," * @api private"," */","","Manager.prototype.handleClientRequest = function (req, res) {","  var self = this;","","  function serve () {","    if (!self.clientLength) {","      self.clientLength = Buffer.byteLength(self.client);","    }","","    var headers = {","        'Content-Type': 'application/javascript'","      , 'Content-Length': self.clientLength","    };","","    if (self.enabled('browser client etag') &amp;&amp; self.clientEtag) {","      headers.ETag = self.clientEtag;","    }","","    res.writeHead(200, headers);","    res.end(self.client);","","    self.log.debug('served client');","  };","","  if (this.get('browser client handler')) {","    this.get('browser client handler').call(this, req, res);","  } else if (!this.client) {","    var file = this.enabled('browser client minification')","          ? 'socket.io.min.js'","          : 'socket.io.js';","","    fs.readFile(client.dist + '/' + file, function (err, data) {","      if (err) {","        res.writeHead(500);","        res.end('Error serving socket.io client.');","","        self.log.warn('Can\\'t cache socket.io client');","        return;","      }","","      self.client = data.toString();","      self.clientEtag = client.version;","      self.log.debug('caching', client.version, 'client');","","      serve();","    });","  } else {","    serve();","  }","};","","/**"," * Handles a handshake request."," *"," * @api private"," */","","Manager.prototype.handleHandshake = function (data, req, res) {","  var self = this;","","  function writeErr (status, message) {","    if (data.query.jsonp) {","      res.writeHead(200, { 'Content-Type': 'application/javascript' });","      res.end('io.j[' + data.query.jsonp + '](new Error(\"' + message + '\"));');","    } else {","      res.writeHead(status);","      res.end(message);","    }","  };","","  function error (err) {","    writeErr(500, 'handshake error');","    self.log.warn('handshake error ' + err);","  };","","  if (!this.verifyOrigin(req)) {","    writeErr(403, 'handshake bad origin');","    return;","  }","","  this.authorize(data, function (err, authorized) {","    if (err) return error(err);","","    self.log.info('handshake ' + (authorized ? 'authorized' : 'unauthorized'));","","    if (authorized) {","      self.store.handshake(data, function (err, id) {","        if (err) return error(err);","","        var hs = [","            id","          , self.get('heartbeat timeout') || ''","          , self.get('close timeout') || ''","          , self.transports(data).join(',')","        ].join(':');","","        if (data.query.jsonp) {","          hs = 'io.j[' + data.query.jsonp + '](' + JSON.stringify(hs) + ');';","          res.writeHead(200, { 'Content-Type': 'application/javascript' });","        } else {","          res.writeHead(200);","        }","","        res.end(hs);","        self.log.info('handshaken', id);","      });","    } else {","      writeErr(403, 'handshake unauthorized');","    }","  })","};","","/**"," * Verifies the origin of a request."," *"," * @api private"," */","","Manager.prototype.verifyOrigin = function (request) {","  var origin = request.headers.origin","    , origins = this.get('origins');","","  if (origin === 'null') origin = '*';","","  if (origins.indexOf('*:*') !== -1) {","    return true;","  }","","  if (origin) {","    try {","      var parts = url.parse(origin);","","      return","        ~origins.indexOf(parts.host + ':' + parts.port) ||","        ~origins.indexOf(parts.host + ':*') ||","        ~origins.indexOf('*:' + parts.port);","    } catch (ex) {}","  }","","  return false;","};","","/**"," * Handles an incoming packet."," *"," * @api private"," */","","Manager.prototype.handlePacket = function (sessid, packet) {","  this.of(packet.endpoint || '').handlePacket(sessid, packet);","};","","/**"," * Performs authentication."," *"," * @param Object client request data"," * @api private"," */","","Manager.prototype.authorize = function (data, fn) {","  if (this.get('authorization')) {","    var self = this;","","    this.get('authorization').call(this, data, function (err, authorized) {","      self.log.debug('client ' + authorized ? 'authorized' : 'unauthorized');","      fn(err, authorized);","    });","  } else {","    this.log.debug('client authorized');","    fn(null, true);","  }","","  return this;","};","","/**"," * Retrieves the transports adviced to the user."," *"," * @api private"," */","","Manager.prototype.transports = function (data) {","  var transp = this.get('transports')","    , ret = [];","","  for (var i = 0, l = transp.length; i &lt; l; i++) {","    var transport = transp[i];","","    if (transport) {","      if (!transport.checkClient || transport.checkClient(data)) {","        ret.push(transport);","      }","    }","  }","","  return ret;","};","","/**"," * Checks whether a request is a socket.io one."," *"," * @return {Object} a client request data object or `false`"," * @api private"," */","","var regexp = /^\\/([^\\/]+)\\/?([^\\/]+)?\\/?([^\\/]+)?\\/?$/","","Manager.prototype.checkRequest = function (req) {","  var resource = this.get('resource');","","  if (req.url.substr(0, resource.length) == resource) {","    var uri = url.parse(req.url.substr(resource.length), true)","      , path = uri.pathname || ''","      , pieces = path.match(regexp);","","    // client request data","    var data = {","        query: uri.query || {}","      , headers: req.headers","      , request: req","      , path: path","    };","","    if (pieces) {","      data.protocol = Number(pieces[1]);","      data.transport = pieces[2];","      data.id = pieces[3];","    };","","    return data;","  }","","  return false;","};","","/**"," * Declares a socket namespace"," */","","Manager.prototype.of = function (nsp) {","  if (this.namespaces[nsp]) {","    return this.namespaces[nsp];","  }","","  return this.namespaces[nsp] = new SocketNamespace(this, nsp);","};"];
