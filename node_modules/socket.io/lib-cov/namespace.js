/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['namespace.js']) {
  _$jscoverage['namespace.js'] = [];
  _$jscoverage['namespace.js'][6] = 0;
  _$jscoverage['namespace.js'][15] = 0;
  _$jscoverage['namespace.js'][23] = 0;
  _$jscoverage['namespace.js'][24] = 0;
  _$jscoverage['namespace.js'][25] = 0;
  _$jscoverage['namespace.js'][26] = 0;
  _$jscoverage['namespace.js'][27] = 0;
  _$jscoverage['namespace.js'][28] = 0;
  _$jscoverage['namespace.js'][34] = 0;
  _$jscoverage['namespace.js'][42] = 0;
  _$jscoverage['namespace.js'][43] = 0;
  _$jscoverage['namespace.js'][52] = 0;
  _$jscoverage['namespace.js'][53] = 0;
  _$jscoverage['namespace.js'][62] = 0;
  _$jscoverage['namespace.js'][63] = 0;
  _$jscoverage['namespace.js'][64] = 0;
  _$jscoverage['namespace.js'][73] = 0;
  _$jscoverage['namespace.js'][74] = 0;
  _$jscoverage['namespace.js'][75] = 0;
  _$jscoverage['namespace.js'][84] = 0;
  _$jscoverage['namespace.js'][85] = 0;
  _$jscoverage['namespace.js'][86] = 0;
  _$jscoverage['namespace.js'][95] = 0;
  _$jscoverage['namespace.js'][96] = 0;
  _$jscoverage['namespace.js'][97] = 0;
  _$jscoverage['namespace.js'][106] = 0;
  _$jscoverage['namespace.js'][107] = 0;
  _$jscoverage['namespace.js'][111] = 0;
  _$jscoverage['namespace.js'][120] = 0;
  _$jscoverage['namespace.js'][121] = 0;
  _$jscoverage['namespace.js'][123] = 0;
  _$jscoverage['namespace.js'][129] = 0;
  _$jscoverage['namespace.js'][130] = 0;
  _$jscoverage['namespace.js'][131] = 0;
  _$jscoverage['namespace.js'][132] = 0;
  _$jscoverage['namespace.js'][133] = 0;
  _$jscoverage['namespace.js'][136] = 0;
  _$jscoverage['namespace.js'][137] = 0;
  _$jscoverage['namespace.js'][139] = 0;
  _$jscoverage['namespace.js'][144] = 0;
  _$jscoverage['namespace.js'][146] = 0;
  _$jscoverage['namespace.js'][155] = 0;
  _$jscoverage['namespace.js'][156] = 0;
  _$jscoverage['namespace.js'][168] = 0;
  _$jscoverage['namespace.js'][169] = 0;
  _$jscoverage['namespace.js'][170] = 0;
  _$jscoverage['namespace.js'][173] = 0;
  _$jscoverage['namespace.js'][187] = 0;
  _$jscoverage['namespace.js'][188] = 0;
  _$jscoverage['namespace.js'][189] = 0;
  _$jscoverage['namespace.js'][192] = 0;
  _$jscoverage['namespace.js'][201] = 0;
  _$jscoverage['namespace.js'][202] = 0;
  _$jscoverage['namespace.js'][206] = 0;
  _$jscoverage['namespace.js'][207] = 0;
  _$jscoverage['namespace.js'][208] = 0;
  _$jscoverage['namespace.js'][213] = 0;
  _$jscoverage['namespace.js'][215] = 0;
  _$jscoverage['namespace.js'][217] = 0;
  _$jscoverage['namespace.js'][219] = 0;
  _$jscoverage['namespace.js'][220] = 0;
  _$jscoverage['namespace.js'][222] = 0;
  _$jscoverage['namespace.js'][225] = 0;
  _$jscoverage['namespace.js'][226] = 0;
  _$jscoverage['namespace.js'][228] = 0;
  _$jscoverage['namespace.js'][230] = 0;
  _$jscoverage['namespace.js'][233] = 0;
  _$jscoverage['namespace.js'][235] = 0;
  _$jscoverage['namespace.js'][236] = 0;
  _$jscoverage['namespace.js'][238] = 0;
  _$jscoverage['namespace.js'][239] = 0;
  _$jscoverage['namespace.js'][242] = 0;
  _$jscoverage['namespace.js'][243] = 0;
  _$jscoverage['namespace.js'][247] = 0;
  _$jscoverage['namespace.js'][249] = 0;
  _$jscoverage['namespace.js'][250] = 0;
  _$jscoverage['namespace.js'][252] = 0;
  _$jscoverage['namespace.js'][253] = 0;
}
_$jscoverage['namespace.js'][6]++;
var Socket = require("./socket"), EventEmitter = process.EventEmitter, parser = require("./parser"), util = require("./util");
_$jscoverage['namespace.js'][15]++;
exports = module.exports = SocketNamespace;
_$jscoverage['namespace.js'][23]++;
function SocketNamespace(mgr, name) {
  _$jscoverage['namespace.js'][24]++;
  this.manager = mgr;
  _$jscoverage['namespace.js'][25]++;
  this.name = name || "";
  _$jscoverage['namespace.js'][26]++;
  this.sockets = {};
  _$jscoverage['namespace.js'][27]++;
  this.setFlags();
}
_$jscoverage['namespace.js'][28]++;
;
_$jscoverage['namespace.js'][34]++;
SocketNamespace.prototype.__proto__ = EventEmitter.prototype;
_$jscoverage['namespace.js'][42]++;
SocketNamespace.prototype.__defineGetter__("log", (function () {
  _$jscoverage['namespace.js'][43]++;
  return this.manager.log;
}));
_$jscoverage['namespace.js'][52]++;
SocketNamespace.prototype.__defineGetter__("store", (function () {
  _$jscoverage['namespace.js'][53]++;
  return this.manager.store;
}));
_$jscoverage['namespace.js'][62]++;
SocketNamespace.prototype.__defineGetter__("json", (function () {
  _$jscoverage['namespace.js'][63]++;
  this.flags.json = true;
  _$jscoverage['namespace.js'][64]++;
  return this;
}));
_$jscoverage['namespace.js'][73]++;
SocketNamespace.prototype.__defineGetter__("volatile", (function () {
  _$jscoverage['namespace.js'][74]++;
  this.flags["volatile"] = true;
  _$jscoverage['namespace.js'][75]++;
  return this;
}));
_$jscoverage['namespace.js'][84]++;
SocketNamespace.prototype["in"] = (function (room) {
  _$jscoverage['namespace.js'][85]++;
  this.flags.endpoint = (this.name === ""? "": (this.name + "/")) + room;
  _$jscoverage['namespace.js'][86]++;
  return this;
});
_$jscoverage['namespace.js'][95]++;
SocketNamespace.prototype.except = (function (id) {
  _$jscoverage['namespace.js'][96]++;
  this.flags.exceptions.push(id);
  _$jscoverage['namespace.js'][97]++;
  return this;
});
_$jscoverage['namespace.js'][106]++;
SocketNamespace.prototype.setFlags = (function () {
  _$jscoverage['namespace.js'][107]++;
  this.flags = {endpoint: this.name, exceptions: []};
  _$jscoverage['namespace.js'][111]++;
  return this;
});
_$jscoverage['namespace.js'][120]++;
SocketNamespace.prototype.packet = (function (packet) {
  _$jscoverage['namespace.js'][121]++;
  packet.endpoint = this.name;
  _$jscoverage['namespace.js'][123]++;
  var store = this.store, log = this.log, volatile = this.flags["volatile"], exceptions = this.flags.exceptions, packet = parser.encodePacket(packet);
  _$jscoverage['namespace.js'][129]++;
  store.clients(this.flags.endpoint, (function (clients) {
  _$jscoverage['namespace.js'][130]++;
  clients.forEach((function (id) {
  _$jscoverage['namespace.js'][131]++;
  if (~ exceptions.indexOf(id)) {
    _$jscoverage['namespace.js'][132]++;
    log.debug("ignoring packet to ", id);
    _$jscoverage['namespace.js'][133]++;
    return;
  }
  _$jscoverage['namespace.js'][136]++;
  if (volatile) {
    _$jscoverage['namespace.js'][137]++;
    store.publish("volatile:" + id, packet);
  }
  else {
    _$jscoverage['namespace.js'][139]++;
    store.client(id).publish(packet);
  }
}));
}));
  _$jscoverage['namespace.js'][144]++;
  this.setFlags();
  _$jscoverage['namespace.js'][146]++;
  return this;
});
_$jscoverage['namespace.js'][155]++;
SocketNamespace.prototype.send = (function (data) {
  _$jscoverage['namespace.js'][156]++;
  return this.packet({type: this.flags.json? "json": "message", data: data});
});
_$jscoverage['namespace.js'][168]++;
SocketNamespace.prototype.emit = (function (name) {
  _$jscoverage['namespace.js'][169]++;
  if (name == "connection" || name == "newListener") {
    _$jscoverage['namespace.js'][170]++;
    return EventEmitter.prototype.emit.apply(this, arguments);
  }
  _$jscoverage['namespace.js'][173]++;
  return this.packet({type: "event", name: name, args: util.toArray(arguments).slice(1)});
});
_$jscoverage['namespace.js'][187]++;
SocketNamespace.prototype.socket = (function (sid, readable) {
  _$jscoverage['namespace.js'][188]++;
  if (! this.sockets[sid]) {
    _$jscoverage['namespace.js'][189]++;
    this.sockets[sid] = new Socket(this.manager, sid, this, readable);
  }
  _$jscoverage['namespace.js'][192]++;
  return this.sockets[sid];
});
_$jscoverage['namespace.js'][201]++;
SocketNamespace.prototype.handlePacket = (function (sessid, packet) {
  _$jscoverage['namespace.js'][202]++;
  var socket = this.socket(sessid), dataAck = packet.ack == "data", self = this;
  _$jscoverage['namespace.js'][206]++;
  function ack() {
    _$jscoverage['namespace.js'][207]++;
    self.log.debug("sending data ack packet");
    _$jscoverage['namespace.js'][208]++;
    socket.packet({type: "ack", args: util.toArray(arguments), ackId: packet.id});
}
  _$jscoverage['namespace.js'][213]++;
  ;
  _$jscoverage['namespace.js'][215]++;
  switch (packet.type) {
  case "connect":
    _$jscoverage['namespace.js'][217]++;
    this.store.join(sessid, this.name, (function () {
  _$jscoverage['namespace.js'][219]++;
  socket.packet({type: "connect"});
  _$jscoverage['namespace.js'][220]++;
  self.emit("connection", socket);
}));
    _$jscoverage['namespace.js'][222]++;
    break;
  case "ack":
    _$jscoverage['namespace.js'][225]++;
    if (socket.acks[packet.ackId]) {
      _$jscoverage['namespace.js'][226]++;
      socket.acks[packet.ackId].apply(socket, packet.args);
    }
    else {
      _$jscoverage['namespace.js'][228]++;
      this.log.info("unknown ack packet");
    }
    _$jscoverage['namespace.js'][230]++;
    break;
  case "event":
    _$jscoverage['namespace.js'][233]++;
    var params = [packet.name].concat(packet.args);
    _$jscoverage['namespace.js'][235]++;
    if (dataAck) {
      _$jscoverage['namespace.js'][236]++;
      params.push(ack);
    }
    _$jscoverage['namespace.js'][238]++;
    socket.$emit.apply(socket, params);
    _$jscoverage['namespace.js'][239]++;
    break;
  case "disconnect":
    _$jscoverage['namespace.js'][242]++;
    socket.emit("disconnect");
    _$jscoverage['namespace.js'][243]++;
    break;
  case "json":
  case "message":
    _$jscoverage['namespace.js'][247]++;
    var params = ["message", packet.data];
    _$jscoverage['namespace.js'][249]++;
    if (dataAck) {
      _$jscoverage['namespace.js'][250]++;
      params.push(ack);
    }
    _$jscoverage['namespace.js'][252]++;
    socket.emit.apply(socket, params);
  }
  _$jscoverage['namespace.js'][253]++;
  ;
});
_$jscoverage['namespace.js'].source = ["","/**"," * Module dependencies."," */","","var Socket = require('./socket')","  , EventEmitter = process.EventEmitter","  , parser = require('./parser')","  , util = require('./util');","","/**"," * Exports the constructor."," */","","exports = module.exports = SocketNamespace;","","/**"," * Constructor."," *"," * @api public."," */","","function SocketNamespace (mgr, name) {","  this.manager = mgr;","  this.name = name || '';","  this.sockets = {};","  this.setFlags();","};","","/**"," * Inherits from EventEmitter."," */","","SocketNamespace.prototype.__proto__ = EventEmitter.prototype;","","/**"," * Access logger interface."," *"," * @api public"," */","","SocketNamespace.prototype.__defineGetter__('log', function () {","  return this.manager.log;","});","","/**"," * Access store."," *"," * @api public"," */","","SocketNamespace.prototype.__defineGetter__('store', function () {","  return this.manager.store;","});","","/**"," * JSON message flag."," *"," * @api public"," */","","SocketNamespace.prototype.__defineGetter__('json', function () {","  this.flags.json = true;","  return this;","});","","/**"," * Volatile message flag."," *"," * @api public"," */","","SocketNamespace.prototype.__defineGetter__('volatile', function () {","  this.flags.volatile = true;","  return this;","});","","/**"," * Overrides the room to relay messages to (flag)"," *"," * @api public"," */","","SocketNamespace.prototype.in = function (room) {","  this.flags.endpoint = (this.name === '' ? '' : (this.name + '/')) + room;","  return this;","};","","/**"," * Adds a session id we should prevent relaying messages to (flag)"," *"," * @api public"," */","","SocketNamespace.prototype.except = function (id) {","  this.flags.exceptions.push(id);","  return this;","};","","/**"," * Sets the default flags."," *"," * @api private"," */","","SocketNamespace.prototype.setFlags = function () {","  this.flags = {","      endpoint: this.name","    , exceptions: []","  };","  return this;","};","","/**"," * Sends out a packet"," *"," * @api private"," */","","SocketNamespace.prototype.packet = function (packet) {","  packet.endpoint = this.name;","","  var store = this.store","    , log = this.log","    , volatile = this.flags.volatile","    , exceptions = this.flags.exceptions","    , packet = parser.encodePacket(packet);","","  store.clients(this.flags.endpoint, function (clients) {","    clients.forEach(function (id) {","      if (~exceptions.indexOf(id)) {","        log.debug('ignoring packet to ', id);","        return;","      }","","      if (volatile) {","        store.publish('volatile:' + id, packet);","      } else {","        store.client(id).publish(packet);","      }","    });","  });","","  this.setFlags();","","  return this;","};","","/**"," * Sends to everyone."," *"," * @api public"," */","","SocketNamespace.prototype.send = function (data) {","  return this.packet({","      type: this.flags.json ? 'json' : 'message'","    , data: data","  });","};","","/**"," * Emits to everyone (override)"," *"," * @api private"," */","","SocketNamespace.prototype.emit = function (name) {","  if (name == 'connection' || name == 'newListener') {","    return EventEmitter.prototype.emit.apply(this, arguments);","  }","","  return this.packet({","      type: 'event'","    , name: name","    , args: util.toArray(arguments).slice(1)","  });","};","","/**"," * Retrieves or creates a write-only socket for a client, unless specified."," *"," * @param {Boolean} whether the socket will be readable when initialized"," * @api private"," */","","SocketNamespace.prototype.socket = function (sid, readable) {","  if (!this.sockets[sid]) {","    this.sockets[sid] = new Socket(this.manager, sid, this, readable);","  }","","  return this.sockets[sid];","};","","/**"," * Handles a packet."," *"," * @api private"," */","","SocketNamespace.prototype.handlePacket = function (sessid, packet) {","  var socket = this.socket(sessid)","    , dataAck = packet.ack == 'data'","    , self = this;","","  function ack () {","    self.log.debug('sending data ack packet');","    socket.packet({","        type: 'ack'","      , args: util.toArray(arguments)","      , ackId: packet.id","    });","  };","","  switch (packet.type) {","    case 'connect':","      this.store.join(sessid, this.name, function () {","        // packet echo","        socket.packet({ type: 'connect' });","        self.emit('connection', socket);","      });","      break;","","    case 'ack':","      if (socket.acks[packet.ackId]) {","        socket.acks[packet.ackId].apply(socket, packet.args);","      } else {","        this.log.info('unknown ack packet');","      }","      break;","","    case 'event':","      var params = [packet.name].concat(packet.args);","","      if (dataAck)","        params.push(ack);","","      socket.$emit.apply(socket, params);","      break;","","    case 'disconnect':","      socket.emit('disconnect');","      break;","","    case 'json':","    case 'message':","      var params = ['message', packet.data];","","      if (dataAck)","        params.push(ack);","","      socket.emit.apply(socket, params);","  };","};"];
