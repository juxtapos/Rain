/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['socket.js']) {
  _$jscoverage['socket.js'] = [];
  _$jscoverage['socket.js'][12] = 0;
  _$jscoverage['socket.js'][20] = 0;
  _$jscoverage['socket.js'][26] = 0;
  _$jscoverage['socket.js'][48] = 0;
  _$jscoverage['socket.js'][49] = 0;
  _$jscoverage['socket.js'][50] = 0;
  _$jscoverage['socket.js'][51] = 0;
  _$jscoverage['socket.js'][52] = 0;
  _$jscoverage['socket.js'][53] = 0;
  _$jscoverage['socket.js'][54] = 0;
  _$jscoverage['socket.js'][55] = 0;
  _$jscoverage['socket.js'][57] = 0;
  _$jscoverage['socket.js'][58] = 0;
  _$jscoverage['socket.js'][60] = 0;
  _$jscoverage['socket.js'][61] = 0;
  _$jscoverage['socket.js'][64] = 0;
  _$jscoverage['socket.js'][70] = 0;
  _$jscoverage['socket.js'][78] = 0;
  _$jscoverage['socket.js'][79] = 0;
  _$jscoverage['socket.js'][88] = 0;
  _$jscoverage['socket.js'][89] = 0;
  _$jscoverage['socket.js'][98] = 0;
  _$jscoverage['socket.js'][99] = 0;
  _$jscoverage['socket.js'][100] = 0;
  _$jscoverage['socket.js'][109] = 0;
  _$jscoverage['socket.js'][110] = 0;
  _$jscoverage['socket.js'][111] = 0;
  _$jscoverage['socket.js'][120] = 0;
  _$jscoverage['socket.js'][121] = 0;
  _$jscoverage['socket.js'][122] = 0;
  _$jscoverage['socket.js'][131] = 0;
  _$jscoverage['socket.js'][132] = 0;
  _$jscoverage['socket.js'][133] = 0;
  _$jscoverage['socket.js'][142] = 0;
  _$jscoverage['socket.js'][143] = 0;
  _$jscoverage['socket.js'][147] = 0;
  _$jscoverage['socket.js'][156] = 0;
  _$jscoverage['socket.js'][157] = 0;
  _$jscoverage['socket.js'][158] = 0;
  _$jscoverage['socket.js'][159] = 0;
  _$jscoverage['socket.js'][169] = 0;
  _$jscoverage['socket.js'][170] = 0;
  _$jscoverage['socket.js'][171] = 0;
  _$jscoverage['socket.js'][172] = 0;
  _$jscoverage['socket.js'][181] = 0;
  _$jscoverage['socket.js'][182] = 0;
  _$jscoverage['socket.js'][183] = 0;
  _$jscoverage['socket.js'][184] = 0;
  _$jscoverage['socket.js'][193] = 0;
  _$jscoverage['socket.js'][194] = 0;
  _$jscoverage['socket.js'][195] = 0;
  _$jscoverage['socket.js'][196] = 0;
  _$jscoverage['socket.js'][198] = 0;
  _$jscoverage['socket.js'][199] = 0;
  _$jscoverage['socket.js'][201] = 0;
  _$jscoverage['socket.js'][202] = 0;
  _$jscoverage['socket.js'][204] = 0;
  _$jscoverage['socket.js'][208] = 0;
  _$jscoverage['socket.js'][210] = 0;
  _$jscoverage['socket.js'][219] = 0;
  _$jscoverage['socket.js'][220] = 0;
  _$jscoverage['socket.js'][221] = 0;
  _$jscoverage['socket.js'][230] = 0;
  _$jscoverage['socket.js'][231] = 0;
  _$jscoverage['socket.js'][232] = 0;
  _$jscoverage['socket.js'][241] = 0;
  _$jscoverage['socket.js'][242] = 0;
  _$jscoverage['socket.js'][243] = 0;
  _$jscoverage['socket.js'][244] = 0;
  _$jscoverage['socket.js'][247] = 0;
  _$jscoverage['socket.js'][256] = 0;
  _$jscoverage['socket.js'][257] = 0;
  _$jscoverage['socket.js'][262] = 0;
  _$jscoverage['socket.js'][263] = 0;
  _$jscoverage['socket.js'][264] = 0;
  _$jscoverage['socket.js'][265] = 0;
  _$jscoverage['socket.js'][268] = 0;
  _$jscoverage['socket.js'][277] = 0;
  _$jscoverage['socket.js'][285] = 0;
  _$jscoverage['socket.js'][286] = 0;
  _$jscoverage['socket.js'][287] = 0;
  _$jscoverage['socket.js'][290] = 0;
  _$jscoverage['socket.js'][297] = 0;
  _$jscoverage['socket.js'][298] = 0;
  _$jscoverage['socket.js'][299] = 0;
  _$jscoverage['socket.js'][300] = 0;
  _$jscoverage['socket.js'][301] = 0;
  _$jscoverage['socket.js'][304] = 0;
  _$jscoverage['socket.js'][306] = 0;
}
_$jscoverage['socket.js'][12]++;
var parser = require("./parser"), util = require("./util"), EventEmitter = process.EventEmitter;
_$jscoverage['socket.js'][20]++;
exports = module.exports = Socket;
_$jscoverage['socket.js'][26]++;
var events = {message: 1, connect: 1, disconnect: 1, open: 1, close: 1, error: 1, retry: 1, reconnect: 1, newListener: 1};
_$jscoverage['socket.js'][48]++;
function Socket(manager, id, nsp, readable) {
  _$jscoverage['socket.js'][49]++;
  this.id = id;
  _$jscoverage['socket.js'][50]++;
  this.namespace = nsp;
  _$jscoverage['socket.js'][51]++;
  this.manager = manager;
  _$jscoverage['socket.js'][52]++;
  this.disconnected = false;
  _$jscoverage['socket.js'][53]++;
  this.ackPackets = 0;
  _$jscoverage['socket.js'][54]++;
  this.acks = {};
  _$jscoverage['socket.js'][55]++;
  this.setFlags();
  _$jscoverage['socket.js'][57]++;
  if (readable) {
    _$jscoverage['socket.js'][58]++;
    var self = this;
    _$jscoverage['socket.js'][60]++;
    this.store.once("disconnect:" + id, (function (reason) {
  _$jscoverage['socket.js'][61]++;
  self.onDisconnect(reason);
}));
  }
}
_$jscoverage['socket.js'][64]++;
;
_$jscoverage['socket.js'][70]++;
Socket.prototype.__proto__ = EventEmitter.prototype;
_$jscoverage['socket.js'][78]++;
Socket.prototype.__defineGetter__("store", (function () {
  _$jscoverage['socket.js'][79]++;
  return this.manager.store;
}));
_$jscoverage['socket.js'][88]++;
Socket.prototype.__defineGetter__("log", (function () {
  _$jscoverage['socket.js'][89]++;
  return this.manager.log;
}));
_$jscoverage['socket.js'][98]++;
Socket.prototype.__defineGetter__("json", (function () {
  _$jscoverage['socket.js'][99]++;
  this.flags.json = true;
  _$jscoverage['socket.js'][100]++;
  return this;
}));
_$jscoverage['socket.js'][109]++;
Socket.prototype.__defineGetter__("volatile", (function () {
  _$jscoverage['socket.js'][110]++;
  this.flags["volatile"] = true;
  _$jscoverage['socket.js'][111]++;
  return this;
}));
_$jscoverage['socket.js'][120]++;
Socket.prototype.__defineGetter__("broadcast", (function () {
  _$jscoverage['socket.js'][121]++;
  this.flags.broadcast = true;
  _$jscoverage['socket.js'][122]++;
  return this;
}));
_$jscoverage['socket.js'][131]++;
Socket.prototype.to = (function (room) {
  _$jscoverage['socket.js'][132]++;
  this.flags.room = room;
  _$jscoverage['socket.js'][133]++;
  return this;
});
_$jscoverage['socket.js'][142]++;
Socket.prototype.setFlags = (function () {
  _$jscoverage['socket.js'][143]++;
  this.flags = {endpoint: this.namespace.name, room: ""};
  _$jscoverage['socket.js'][147]++;
  return this;
});
_$jscoverage['socket.js'][156]++;
Socket.prototype.onDisconnect = (function (reason) {
  _$jscoverage['socket.js'][157]++;
  if (! this.disconnected) {
    _$jscoverage['socket.js'][158]++;
    this.emit("disconnect", reason);
    _$jscoverage['socket.js'][159]++;
    this.disconnected = true;
  }
});
_$jscoverage['socket.js'][169]++;
Socket.prototype.join = (function (name, fn) {
  _$jscoverage['socket.js'][170]++;
  var nsp = this.namespace.name;
  _$jscoverage['socket.js'][171]++;
  this.store.join(this.id, (nsp === ""? "": (nsp + "/")) + name, fn);
  _$jscoverage['socket.js'][172]++;
  return this;
});
_$jscoverage['socket.js'][181]++;
Socket.prototype.leave = (function (name, fn) {
  _$jscoverage['socket.js'][182]++;
  var nsp = this.namespace.name;
  _$jscoverage['socket.js'][183]++;
  this.store.leave(this.id, (nsp === ""? "": (nsp + "/")) + name, fn);
  _$jscoverage['socket.js'][184]++;
  return this;
});
_$jscoverage['socket.js'][193]++;
Socket.prototype.packet = (function (packet) {
  _$jscoverage['socket.js'][194]++;
  if (this.flags.broadcast) {
    _$jscoverage['socket.js'][195]++;
    this.log.debug("broadcasting packet");
    _$jscoverage['socket.js'][196]++;
    this.namespace["in"](this.flags.room).except(this.id).packet(packet);
  }
  else {
    _$jscoverage['socket.js'][198]++;
    packet.endpoint = this.flags.endpoint;
    _$jscoverage['socket.js'][199]++;
    packet = parser.encodePacket(packet);
    _$jscoverage['socket.js'][201]++;
    if (this.flags["volatile"]) {
      _$jscoverage['socket.js'][202]++;
      this.store.publish("volatile:" + this.id, packet);
    }
    else {
      _$jscoverage['socket.js'][204]++;
      this.store.client(this.id).publish(packet);
    }
  }
  _$jscoverage['socket.js'][208]++;
  this.setFlags();
  _$jscoverage['socket.js'][210]++;
  return this;
});
_$jscoverage['socket.js'][219]++;
Socket.prototype.set = (function (key, value, fn) {
  _$jscoverage['socket.js'][220]++;
  this.store.client(this.id).set(key, value, fn);
  _$jscoverage['socket.js'][221]++;
  return this;
});
_$jscoverage['socket.js'][230]++;
Socket.prototype.get = (function (key, fn) {
  _$jscoverage['socket.js'][231]++;
  this.store.client(this.id).get(key, fn);
  _$jscoverage['socket.js'][232]++;
  return this;
});
_$jscoverage['socket.js'][241]++;
Socket.prototype.disconnect = (function () {
  _$jscoverage['socket.js'][242]++;
  if (! this.disconnected) {
    _$jscoverage['socket.js'][243]++;
    this.log.info("booting client");
    _$jscoverage['socket.js'][244]++;
    this.store.disconnect(this.id, true);
  }
  _$jscoverage['socket.js'][247]++;
  return this;
});
_$jscoverage['socket.js'][256]++;
Socket.prototype.send = (function (data, fn) {
  _$jscoverage['socket.js'][257]++;
  var packet = {type: this.flags.json? "json": "message", data: data};
  _$jscoverage['socket.js'][262]++;
  if (fn) {
    _$jscoverage['socket.js'][263]++;
    packet.id = ++this.ackPackets;
    _$jscoverage['socket.js'][264]++;
    packet.ack = true;
    _$jscoverage['socket.js'][265]++;
    this.acks[packet.id] = fn;
  }
  _$jscoverage['socket.js'][268]++;
  return this.packet(packet);
});
_$jscoverage['socket.js'][277]++;
Socket.prototype.$emit = EventEmitter.prototype.emit;
_$jscoverage['socket.js'][285]++;
Socket.prototype.emit = (function (ev) {
  _$jscoverage['socket.js'][286]++;
  if (events[ev]) {
    _$jscoverage['socket.js'][287]++;
    return this.$emit.apply(this, arguments);
  }
  _$jscoverage['socket.js'][290]++;
  var args = util.toArray(arguments).slice(1), lastArg = args[args.length - 1], packet = {type: "event", name: ev};
  _$jscoverage['socket.js'][297]++;
  if ("function" == typeof lastArg) {
    _$jscoverage['socket.js'][298]++;
    packet.id = ++this.ackPackets;
    _$jscoverage['socket.js'][299]++;
    packet.ack = lastArg.length? "data": true;
    _$jscoverage['socket.js'][300]++;
    this.acks[packet.id] = lastArg;
    _$jscoverage['socket.js'][301]++;
    args = args.slice(0, args.length - 1);
  }
  _$jscoverage['socket.js'][304]++;
  packet.args = args;
  _$jscoverage['socket.js'][306]++;
  return this.packet(packet);
});
_$jscoverage['socket.js'].source = ["","/*!"," * socket.io-node"," * Copyright(c) 2011 LearnBoost &lt;dev@learnboost.com&gt;"," * MIT Licensed"," */","","/**"," * Module dependencies."," */","","var parser = require('./parser')","  , util = require('./util')","  , EventEmitter = process.EventEmitter;","","/**"," * Export the constructor."," */","","exports = module.exports = Socket;","","/**"," * Reserved event names."," */","","var events = {","    message: 1","  , connect: 1","  , disconnect: 1","  , open: 1","  , close: 1","  , error: 1","  , retry: 1","  , reconnect: 1","  , newListener: 1","};","","/**"," * Socket constructor."," *"," * @param {Manager} manager instance"," * @param {String} session id"," * @param {Namespace} namespace the socket belongs to"," * @param {Boolean} whether the "," * @api public"," */","","function Socket (manager, id, nsp, readable) {","  this.id = id;","  this.namespace = nsp;","  this.manager = manager;","  this.disconnected = false;","  this.ackPackets = 0;","  this.acks = {};","  this.setFlags();","","  if (readable) {","    var self = this;","","    this.store.once('disconnect:' + id, function (reason) {","      self.onDisconnect(reason);","    });","  }","};","","/**"," * Inherits from EventEmitter."," */","","Socket.prototype.__proto__ = EventEmitter.prototype;","","/**"," * Accessor shortcut for the store."," *"," * @api private"," */","","Socket.prototype.__defineGetter__('store', function () {","  return this.manager.store;","});","","/**"," * Accessor shortcut for the logger."," *"," * @api private"," */","","Socket.prototype.__defineGetter__('log', function () {","  return this.manager.log;","});","","/**"," * JSON message flag."," *"," * @api public"," */","","Socket.prototype.__defineGetter__('json', function () {","  this.flags.json = true;","  return this;","});","","/**"," * Volatile message flag."," *"," * @api public"," */","","Socket.prototype.__defineGetter__('volatile', function () {","  this.flags.volatile = true;","  return this;","});","","/**"," * Broadcast message flag."," *"," * @api public"," */","","Socket.prototype.__defineGetter__('broadcast', function () {","  this.flags.broadcast = true;","  return this;","});","","/**"," * Overrides the room to broadcast messages to (flag)"," *"," * @api public"," */","","Socket.prototype.to = function (room) {","  this.flags.room = room;","  return this;","};","","/**"," * Resets flags"," *"," * @api private"," */","","Socket.prototype.setFlags = function () {","  this.flags = {","      endpoint: this.namespace.name","    , room: ''","  };","  return this;","};","","/**"," * Triggered on disconnect"," *"," * @api private"," */","","Socket.prototype.onDisconnect = function (reason) {","  if (!this.disconnected) {","    this.emit('disconnect', reason);","    this.disconnected = true;","  }","};","","/**"," * Joins a user to a room."," *"," * @api public"," */","","Socket.prototype.join = function (name, fn) {","  var nsp = this.namespace.name;","  this.store.join(this.id, (nsp === '' ? '' : (nsp + '/')) + name, fn);","  return this;","};","","/**"," * Joins a user to a room."," *"," * @api public"," */","","Socket.prototype.leave = function (name, fn) {","  var nsp = this.namespace.name;","  this.store.leave(this.id, (nsp === '' ? '' : (nsp + '/')) + name, fn);","  return this;","};","","/**"," * Transmits a packet."," *"," * @api private"," */","","Socket.prototype.packet = function (packet) {","  if (this.flags.broadcast) {","    this.log.debug('broadcasting packet');","    this.namespace.in(this.flags.room).except(this.id).packet(packet);","  } else {","    packet.endpoint = this.flags.endpoint;","    packet = parser.encodePacket(packet);","","    if (this.flags.volatile) {","      this.store.publish('volatile:' + this.id, packet);","    } else {","      this.store.client(this.id).publish(packet);","    }","  }","","  this.setFlags();","","  return this;","};","","/**"," * Stores data for the client."," *"," * @api public"," */","","Socket.prototype.set = function (key, value, fn) {","  this.store.client(this.id).set(key, value, fn);","  return this;","};","","/**"," * Retrieves data for the client"," *"," * @api public"," */","","Socket.prototype.get = function (key, fn) {","  this.store.client(this.id).get(key, fn);","  return this;","};","","/**"," * Kicks client"," *"," * @api public"," */","","Socket.prototype.disconnect = function () {","  if (!this.disconnected) {","    this.log.info('booting client');","    this.store.disconnect(this.id, true);","  }","","  return this;","};","","/**"," * Send a message."," *"," * @api public"," */","","Socket.prototype.send = function (data, fn) {","  var packet = {","      type: this.flags.json ? 'json' : 'message'","    , data: data","  };","","  if (fn) {","    packet.id = ++this.ackPackets;","    packet.ack = true;","    this.acks[packet.id] = fn;","  }","","  return this.packet(packet);","};","","/**"," * Original emit function."," *"," * @api private"," */","","Socket.prototype.$emit = EventEmitter.prototype.emit;","","/**"," * Emit override for custom events."," *"," * @api public"," */","","Socket.prototype.emit = function (ev) {","  if (events[ev]) {","    return this.$emit.apply(this, arguments);","  }","","  var args = util.toArray(arguments).slice(1)","    , lastArg = args[args.length - 1]","    , packet = {","          type: 'event'","        , name: ev","      };","","  if ('function' == typeof lastArg) {","    packet.id = ++this.ackPackets;","    packet.ack = lastArg.length ? 'data' : true;","    this.acks[packet.id] = lastArg;","    args = args.slice(0, args.length - 1);","  }","","  packet.args = args;","","  return this.packet(packet);","};"];
